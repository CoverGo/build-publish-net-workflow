#@ load("@ytt:data", "data")

#@ load("@ytt:overlay", "overlay")
#@overlay/match by=overlay.subset({"name": "Build and publish"}), expects="0+"
#@ load("integration-tests-legacy-steps.lib.yml", "integration_tests_legacy_steps")
#@ load("workflows.lib.yml", "pull_request_defaults")
#@ load("workflows.lib.yml", "image_full_tag")
#@ load("workflows.lib.yml", "image_versioned_tag")
#@ load("workflows.lib.yml", "tag_cache")
#@ load("workflows.lib.yml", "tag_version")
#@ load("workflows.lib.yml", "login_docker")
#@ load("workflows.lib.yml", "checkout_private_actions")
#@ load("workflows.lib.yml", "checkout")
#@ load("workflows.lib.yml", "setup_qemu")
#@ load("workflows.lib.yml", "setup_buildx")
#@ load("workflows.lib.yml", "build_and_push_docker")
#@ load("workflows.lib.yml", "image_build_job")

name: Build and publish
"on": #@ pull_request_defaults(data.values.git)

jobs:
  version:
    runs-on: ubuntu-latest
    name: Get version from git tag
    outputs:
      app_version: ${{ steps.version.outputs.app_version }}
      file_version: ${{ steps.version.outputs.file_version }}
      information_version: ${{ steps.version.outputs.information_version }}
      issue_id_slug: ${{ steps.issue-key.outputs.issue_id_slug }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - #@ checkout_private_actions()
    - name: Get version from git tags
      id: version
      uses: ./.github/actions/get-version
    - name: Get jira Ticket slug
      id: issue-key
      uses: ./.github/actions/get-issue-key
#@ if data.values.nuget.enabled :
  nuget-build: 
    name: Build nuget package 
#@ end
  
#@ if data.values.service.enabled:
  docker-build-service: 
    name: #@ "Build {} image".format(data.values.service.name)
#@ end
  
#@ if data.values.unit_test.enabled:  
  docker-build-service-test-unit:
    name: Build and run unit tests image
    env:
      RESULTS_PATH: TestResults
      UNIT_TEST_IMAGE_TAG: #@ tag_cache(data.values.cache_registry, data.values.unit_test)
    steps:
      - name: dummy step for proper ordering
        run: exit 0
      - #@ build_and_push_docker(data.values.unit_test, data.values.cache_registry, step_name="Load unit test image into local docker", load_image=True, push_image=False)
      - name: Run unit tests
        run: |
          id=$(docker images "$UNIT_TEST_IMAGE_TAG" -q | head -n 1)
          echo "found image id: $id"
          docker run --name unit_tests $id
      - #@ checkout_private_actions()
      - name: Get unit tests results
        if: always()
        uses: ./.github/actions/docker-extract
        with:
          filter: ancestor=$UNIT_TEST_IMAGE_TAG
          container-path: #@ data.values.unit_test.container_result_path
          host-path: ./TestResults
      - name: Upload unit test results
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Unit test results
          path: ${{ env.RESULTS_PATH }}
      - name: Publish unit test results as Check
        uses: docker://ghcr.io/enricomi/publish-unit-test-result-action:latest
        if: always()
        with:
          report_individual_runs: "true"
          check_name: Unit Tests Results
          github_token: ${{ secrets.GITHUB_TOKEN }}
          files: ${{ env.RESULTS_PATH }}/**/*.xml
#@ end
  
#@ if data.values.integration_test.enabled :
  docker-build-tests-integration: 
    name: Build int test image
    
  integration-tests: 
    runs-on: ubuntu-latest
    name: Run integration tests
    needs:
    - docker-build-service
    - docker-build-tests-integration
    - version
#@ for job_name in data.values.additional_images.job_names:
    - #@ job_name
#@ end
    env:
      RESULTS_PATH: TestResults
    steps:
    - #@ checkout()
    - #@ checkout_private_actions()
    - #@ login_docker(data.values.cache_registry)
    - name: Run integration tests
      env:
        issue_slug: ${{ needs.version.outputs.issue_id_slug }}
      run: #@ data.values.integration_test.run_command
    - name: Collect integration test results
      if: always()
      uses: ./.github/actions/docker-extract
      with:
        filter: #@ "ancestor="+tag_cache(data.values.cache_registry, data.values.integration_test)
        container-path: #@ data.values.integration_test.container_result_path
        host-path: ./TestResults
    - name: Gather test environment logs
      if: always()
      uses: ./.github/actions/docker-diagnose
      with:
        filter: name=covergo*
        diagnostic-result-path: investigate
        include-compose: true
    - name: Upload environment logs
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: Integration tests environment diagnostics
        path: investigate/*
    - name: Upload integration test results
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: Integration test results
        path: ${{ env.RESULTS_PATH }}
    - name: Publish integration tests results as check
      uses: docker://ghcr.io/enricomi/publish-unit-test-result-action:latest
      if: always()
      with:
        report_individual_runs: "true"
        check_name: Integration Tests Results
        github_token: ${{ secrets.GITHUB_TOKEN }}
        files: ${{ env.RESULTS_PATH }}/**/*.xml
#@ end
  
  docker-publish-github:
    name: #@ "Publish {} to GitHub".format(data.values.service.name)
    needs:
     - version
     - integration-tests
     - docker-build-service-test-unit
     - integration-tests-legacy-small
     - integration-tests-legacy-big
     
  docker-publish-alicloud:
    name: #@ "Publish {} to AliCloud".format(data.values.service.name)
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    needs:
        - version
        - integration-tests
        - docker-build-service-test-unit
        - integration-tests-legacy-small
        - integration-tests-legacy-big
 
#@ if data.values.nuget.enabled :
  nuget-publish:
    runs-on: ubuntu-latest
    needs:
    - version
    - integration-tests
    - nuget-build
    - docker-build-service-test-unit
    - integration-tests-legacy-small
    - integration-tests-legacy-big
    name: Publish Nuget package
    env:
      IMAGE_TAG: #@ tag_cache(data.values.cache_registry, data.values.nuget)
    steps:
    - #@ checkout_private_actions()
    - name: Create docker image with nuget packages
      run: docker create $IMAGE_TAG --name nuget
    - name: Copy nuget packages from docker image
      uses: ./.github/actions/docker-extract
      with:
        filter: ancestor=$IMAGE_TAG
        container-path: #@ data.values.nuget.container_result_path
        host-path: ./nuget
    - name: Push generated package to GitHub registry
      run: dotnet nuget push ./nuget/*.nupkg --api-key ${{ secrets.GITHUB_TOKEN }}
        --source https://nuget.pkg.github.com/covergo/index.json
    - name: Push generated package symbols to GitHub registry
      run: dotnet nuget push ./nuget/*.snupkg --api-key ${{ secrets.GITHUB_TOKEN }}
        --source https://nuget.pkg.github.com/covergo/index.json
#@ end

  integration-tests-legacy-small:
    name: Run legacy integration small tenants tests
    runs-on: #@ data.values.integration_tests_legacy.runner
    needs:
      - version
      - docker-build-service
    steps: #@ integration_tests_legacy_steps(data.values.integration_tests_legacy.repository,[data.values.cache_registry,data.values.main_registry], data.values.integration_tests_legacy.environment, data.values.integration_tests_legacy.test_suites.small_tenants)
  integration-tests-legacy-big:
    name: Run legacy integration big tenants tests
    runs-on: #@ data.values.integration_tests_legacy.runner
    needs:
      - version
      - docker-build-service
    steps: #@ integration_tests_legacy_steps(data.values.integration_tests_legacy.repository, [data.values.cache_registry,data.values.main_registry], data.values.integration_tests_legacy.environment, data.values.integration_tests_legacy.test_suites.big_tenants)
