#@ load("@ytt:data", "data")

#@ load("@ytt:overlay", "overlay")
#@overlay/match by=overlay.subset({"name": "Build and publish"}), expects="0+"
#@ load("integration-tests-legacy-steps.lib.yml", "integration_tests_legacy_steps")
#@ load("workflows.lib.yml", "pull_request_defaults")
#@ load("workflows.lib.yml", "image_full_tag")
#@ load("workflows.lib.yml", "image_versioned_tag")
#@ load("workflows.lib.yml", "tag_cache")
#@ load("workflows.lib.yml", "tag_version")
#@ load("workflows.lib.yml", "login_docker")
#@ load("workflows.lib.yml", "checkout_private_actions")
#@ load("workflows.lib.yml", "checkout")
#@ load("workflows.lib.yml", "build_and_push_docker")
#@ load("workflows.lib.yml", "image_build_job")
#@ load("workflows.lib.yml", "get_runner")
#@ load("workflows.lib.yml", "docker_build_job_name")
#@ load("workflows.lib.yml", "job_name_from_slug")
#@ load("build_publish.lib.yml", "set_build_number")
#@ load("build_publish.lib.yml", "set_version")
#@ load("build_publish.lib.yml", "get_repository_built_images")
#@ load("build_publish.lib.yml", "integration_test_steps")
#@ load("build_publish.lib.yml", "get_integration_test_run_job_name")
#@ load("build_publish.lib.yml", "get_additional_images_build_jobs")
#@ load("build_publish.lib.yml", "get_integration_tests_build_jobs")
#@ load("build_publish.lib.yml", "get_integration_tests_run_jobs")

#@ load("@ytt:template", "template")



name: Build and publish
"on": #@ pull_request_defaults(data.values)

jobs:
 
  version:
    runs-on: ubuntu-latest
    name: Get version from git tag
    outputs:
      app_version: ${{ steps.version.outputs.app_version }}
      file_version: ${{ steps.version.outputs.file_version }}
      information_version: ${{ steps.version.outputs.information_version }}
      issue_id_slug: ${{ steps.issue-key.outputs.issue_id_slug }}
      docker_image_ali_cloud_tags: ${{ steps.tags.outputs.docker_image_ali_cloud_tags }}
      docker_image_ghcr_tags: ${{ steps.tags.outputs.docker_image_ghcr_tags }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - #@ checkout_private_actions()
    - name: Get jira Ticket slug
      id: issue-key
      uses: ./.github/actions/get-issue-key
    - name: Get version from git tags
      id: version
      uses: ./.github/actions/get-version
      with:
        build-number: #@ set_build_number(data.values)
        pre-release-version: #@ set_version(data.values)
    - name: Get docker image tags
      id: tags
      env: 
        ghcr_versioned_tag: #@ image_full_tag(data.values.cache_registry.url,data.values.service.image_name,"${{ steps.version.outputs.app_version }}")
        ali_cloud_versioned_tag: #@ image_full_tag(data.values.main_registry.url,data.values.service.image_name,"${{ steps.version.outputs.app_version }}")
        ghcr_latest_tag: #@ image_full_tag(data.values.cache_registry.url,data.values.service.image_name,"latest")
        ali_cloud_latest_tag: #@ image_full_tag(data.values.main_registry.url,data.values.service.image_name,"latest")
      run: |

       ali_cloud_tags=${ali_cloud_versioned_tag}
       ghcr_tags=${ghcr_versioned_tag}
        
       git_ref=${{ github.ref }}
       branch=${git_ref#refs/heads/}
       if [[ "$branch" = 'main' || "$branch" = 'master'  ]]; then
         ali_cloud_tags="${ali_cloud_tags},${ali_cloud_latest_tag}"
         ghcr_tags="${ghcr_tags},${ghcr_latest_tag}"
       fi
        
       echo final tags for ghcr are:  ${ghcr_tags}
       echo final tags for ali are: ${ali_cloud_tags}
       echo ::set-output name=docker_image_ghcr_tags::${ghcr_tags}
       echo ::set-output name=docker_image_ali_cloud_tags::${ali_cloud_tags}
        

#@ if data.values.nuget.enabled :
  nuget-build: 
    name: Build nuget package 
    needs:
      - version
#@ end
  
#@ if data.values.service.enabled:
  docker-build-service: 
    name: #@ "Build {} image".format(data.values.service.name)
    needs:
      - version
#@ end
  
#@ if data.values.unit_test.enabled:  
  docker-build-service-test-unit:
    name: Build and run unit tests image
    env:
      RESULTS_PATH: TestResults
      UNIT_TEST_IMAGE_TAG: #@ tag_cache(data.values.cache_registry, data.values.unit_test)
    needs:
      - version
    steps:
      - name: dummy step for proper ordering
        run: exit 0
      - #@ build_and_push_docker(data.values.unit_test, data.values.cache_registry, step_name="Load unit test image into local docker", load_image=True, push_image=False)
      - name: Run unit tests
        run: |
          id=$(docker images "$UNIT_TEST_IMAGE_TAG" -q | head -n 1)
          echo "found image id: $id"
          docker run --name unit_tests $id
      - #@ checkout_private_actions()
      - name: Get unit tests results
        if: always()
        uses: ./.github/actions/docker-extract
        with:
          filter: ancestor=$UNIT_TEST_IMAGE_TAG
          container-path: #@ data.values.unit_test.container_result_path
          host-path: ./TestResults
      - name: Upload unit test results
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Unit test results
          path: ${{ env.RESULTS_PATH }}
      - name: Publish unit test results as Check
        uses: docker://ghcr.io/enricomi/publish-unit-test-result-action:latest
        if: always()
        with:
          report_individual_runs: "true"
          check_name: Unit Tests Results
          github_token: ${{ secrets.GITHUB_TOKEN }}
          files: ${{ env.RESULTS_PATH }}/**/*.xml
#@ end
  
#@ if hasattr(data.values,"integration_test") :
  #@ integration_tests_run_needs = []
  #@ integration_tests_run_needs.extend(get_integration_tests_build_jobs(data.values.integration_test))
  #@ integration_tests_run_needs.extend(get_additional_images_build_jobs(data.values.additional_images))

  #@ for integration_test_definition in data.values.integration_test :
  build-integration-test-job: #@ template.replace({docker_build_job_name(integration_test_definition): image_build_job(integration_test_definition, data.values.cache_registry, needs=["version"], job_name="Build "+integration_test_definition.name)})
  run-integration-tests-job: #@ template.replace({get_integration_test_run_job_name(integration_test_definition): integration_test_steps(integration_test_definition, get_repository_built_images(data.values), data.values.main_registry, data.values.cache_registry, integration_tests_run_needs)})
  #@ end
#@ end
  
  docker-publish-github:
    name: #@ "Publish {} to GitHub".format(data.values.service.name)
    needs:
     - version
     #@ if hasattr(data.values,"integration_test"):
       #@ for integration_test_run_job_name in get_integration_tests_run_jobs(data.values.integration_test):
     - #@ integration_test_run_job_name
       #@ end
     #@ end
     - docker-build-service-test-unit
     #@ if (hasattr(data.values,"integration_tests_legacy")):
     - integration-tests-legacy-small
     - integration-tests-legacy-big
     #@ end
     
  docker-publish-alicloud:
    name: #@ "Publish {} to AliCloud".format(data.values.service.name)
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    needs:
        - version
      #@ if hasattr(data.values,"integration_test"):
      #@ for integration_test_run_job_name in get_integration_tests_run_jobs(data.values.integration_test):
        - #@ integration_test_run_job_name
      #@ end
      #@ end
        - docker-build-service-test-unit
      #@ if (hasattr(data.values,"integration_tests_legacy")):
        - integration-tests-legacy-small
        - integration-tests-legacy-big
      #@ end
 
#@ if data.values.nuget.enabled :
  nuget-publish:
    runs-on: ubuntu-latest
    needs:
    - version
    #@ if hasattr(data.values,"integration_test"):
      #@ for integration_test_run_job_name in get_integration_tests_run_jobs(data.values.integration_test):
    - #@ integration_test_run_job_name
      #@ end
    #@ end
    - nuget-build
    - docker-build-service-test-unit
    #@ if (hasattr(data.values,"integration_tests_legacy")):
    - integration-tests-legacy-small
    - integration-tests-legacy-big
    #@ end
    name: Publish Nuget package
    env:
      IMAGE_TAG: #@ tag_cache(data.values.cache_registry, data.values.nuget)
    steps:
    - #@ checkout_private_actions()
    - name: Create docker image with nuget packages
      run: docker create $IMAGE_TAG --name nuget
    - name: Copy nuget packages from docker image
      uses: ./.github/actions/docker-extract
      with:
        filter: ancestor=$IMAGE_TAG
        container-path: #@ data.values.nuget.container_result_path
        host-path: ./nuget
    - name: Push generated package to GitHub registry
      run: dotnet nuget push ./nuget/*.nupkg --api-key ${{ secrets.GITHUB_TOKEN }}
        --source https://nuget.pkg.github.com/covergo/index.json
    - name: Push generated package symbols to GitHub registry
      run: dotnet nuget push ./nuget/*.snupkg --api-key ${{ secrets.GITHUB_TOKEN }}
        --source https://nuget.pkg.github.com/covergo/index.json
#@ end

#@ if (hasattr(data.values,"integration_tests_legacy")):
  
  integration-tests-legacy-small:
    name: Run legacy integration small tenants tests
    runs-on: #@ data.values.integration_tests_legacy.runner
    needs:
      - version
      - docker-build-service
    steps: #@ integration_tests_legacy_steps(data.values.integration_tests_legacy.repository,[data.values.cache_registry,data.values.main_registry], data.values.integration_tests_legacy.environment, data.values.integration_tests_legacy.test_suites.small_tenants)
  integration-tests-legacy-big:
    name: Run legacy integration big tenants tests
    runs-on: #@ data.values.integration_tests_legacy.runner
    needs:
      - version
      - docker-build-service
    steps: #@ integration_tests_legacy_steps(data.values.integration_tests_legacy.repository, [data.values.cache_registry,data.values.main_registry], data.values.integration_tests_legacy.environment, data.values.integration_tests_legacy.test_suites.big_tenants)

#@ end

#@ if hasattr(data.values,"additional_images"):
#@ for additional_image in data.values.additional_images :
  job: #@ template.replace({docker_build_job_name(additional_image): image_build_job(additional_image, data.values.cache_registry, needs=["version"], job_name=additional_image.name)})
#@ end
#@ end

  

