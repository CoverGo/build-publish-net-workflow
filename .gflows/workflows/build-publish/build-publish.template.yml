#@ load("@ytt:data", "data")

#@ load("integration-tests-legacy-steps.lib.yml", "integration_tests_legacy_steps")
#@ load("job_docker_build.lib.yml", "docker")
#@ load("job_integration_test.lib.yml", "integration_test")
#@ load("job_unit_test.lib.yml", "unit_test_job")

#@  load("job_version.lib.yml", "generate_version_job")
#@  load("job_docker_publish_github.lib.yml", "generate_docker_publish_github")
#@  load("job_docker_publish_alicloud.lib.yml", "generate_docker_publish_alicloud")
#@  load("job_publish_nuget.lib.yml", "generate_nuget_publish_job")
#@  load("job_build_nuget.lib.yml", "generate_nuget_build_job")
#@  load("job_integration_tests_legacy.lib.yml", "generate_integration_test_legacy_small")
#@  load("job_integration_tests_legacy.lib.yml", "generate_integration_test_legacy_big")
#@  load("naming.lib.yml", "job")
#@  load("steps.lib.yml", "steps")
#@  load("common.lib.yml", "common")
#@  load("job_dependency_resolution.lib.yml", "dep")
#@  load("build_publish_naming.lib.yml", "bpnaming")


---
#@ def generate_jobs(data):
  #@ jobs = {"version": generate_version_job(data.values)}


  #@ if hasattr(data.values,"nuget"):
  #@  nuget_sections = []
  #@   
  #@  if type(data.values.nuget) != type([]):
  #@    nuget_sections.append(data.values.nuget)
  #@  else: 
  #@    nuget_sections = data.values.nuget
  #@  end
  #@ 
  #@  for nuget_section in nuget_sections: 
  #@     jobs["nuget-build-"+nuget_section.slug] = generate_nuget_build_job(nuget_section, data.values)
  #@     jobs["nuget-publish-"+nuget_section.slug]= generate_nuget_publish_job(nuget_section, data.values)
  #@  end
  #@ 
  #@ end

  #@ if hasattr(data.values,"service"):
    #@ jobs[job.id.docker_build(data.values.service)] = docker.job.build(data.values.service, data.values)
  #@ end
  
  #@ for unit_test_section in getattr(data.values,"unit_test",[]):
  #@   build_job_name = job.id.docker_build(unit_test_section)
  #@   jobs[build_job_name] = unit_test_job.build(unit_test_section,data.values)
  #@   jobs[job.id.docker_run(unit_test_section)] = unit_test_job.run(unit_test_section,data.values.cache_registry, data.values, ["version",build_job_name])
  #@ end 
  
  #@ if hasattr(data.values,"integration_test") :
    #@ needs = ["version"]
    #@ if (hasattr(data.values,"additional_images")):
    #@ needs.extend(dep.get_additional_images_build_jobs(data.values.additional_images))
    #@ end
    #@ for integration_test_definition in data.values.integration_test:
       #@ build_job_id = job.id.docker_build(integration_test_definition)
       #@ jobs[build_job_id]= integration_test.build(integration_test_definition,data.values)
       #@ jobs[bpnaming.get_integration_test_run_job_name(integration_test_definition)]= integration_test.run(integration_test_definition,data.values, ["version",build_job_id])
    #@ end
  #@ end
  
  # jobs["docker-publish-github"] = generate_docker_publish_github(data.values)
  
  #@ if hasattr(data.values,"main_registry"): 
    #@ jobs["docker-publish-alicloud"] = generate_docker_publish_alicloud(data.values)
  #@ end

  #@ if (hasattr(data.values,"integration_tests_legacy")):
    #@ if hasattr( data.values.integration_tests_legacy.test_suites, "small_tenants") :     
      #@ jobs["integration-tests-legacy-small"]= generate_integration_test_legacy_small(data.values)
    #@ end
    #@ if hasattr( data.values.integration_tests_legacy.test_suites, "big_tenants") :   
     #@ jobs["integration-tests-legacy-big"]=  generate_integration_test_legacy_big(data.values)
    #@ end
  #@ end
  
  #@ if hasattr(data.values,"additional_images"):
    #@ for additional_image in data.values.additional_images :
     #@ jobs[job.id.docker_build(additional_image)] = docker.job.build(additional_image, data.values)
    #@ end
  #@ end
    
  #@ return jobs
#@ end

name: Build and publish
"on": #@ common.workflow_triggers(getattr(data.values,"git",None))
jobs: #@ generate_jobs(data)
 

  

