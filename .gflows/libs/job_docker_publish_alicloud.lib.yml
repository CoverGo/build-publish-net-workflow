#@ load("@ytt:data", "data")

#@ load("common.lib.yml", "common")
#@ load("steps.lib.yml", "steps")
#@ load("naming.lib.yml", "job")
#@ load("job_dependency_resolution.lib.yml", "dep")
#@ load("build_publish_steps.lib.yml", "bpsteps")
#@ load("tagging.lib.yml", "tagging")
---
#@ def generate_docker_publish_alicloud(sections):
#@ needs = ["version", job.id.docker_build(sections.service), "docker-publish-github"]
#@ name ="Publish {} to AliCloud".format(sections.service.name)

#@ if hasattr(sections,"integration_test"):
#@ needs.extend(dep.get_integration_tests_run_jobs(sections.integration_test))
#@ end

#@ if hasattr(sections,"unit_test"):
#@ needs.extend(dep.get_unit_tests_job_names(sections.unit_test))
#@ end

#@ if (hasattr(sections,"integration_tests_legacy")):
#@ needs.append("integration-tests-legacy-small")
#@ needs.append("integration-tests-legacy-big")
#@ end

#@ steps = generate_docker_publish_alicloud_steps(sections)
#@ branchCondition = common.build_git_branches_condition(sections.main_registry)
#@ tagCondition = "startsWith(github.ref, 'refs/tags/')"
#@ conditions = " || ".join([branchCondition, tagCondition])
#@ return common.generate_job(sections.service, steps, None, sections, needs, "Push service to AliCloud",conditions)
#@ end
---
#@ def generate_docker_publish_alicloud_steps(sections):
- #@ steps.login_docker(sections.cache_registry)
- #@ steps.login_docker(sections.main_registry)
- #@ bpsteps.copy_between_registries_step(tagging.image(sections.cache_registry, sections.service),"${{ needs.version.outputs.docker_image_ali_cloud_tags }}",sections.main_registry.name)
#@ end
---