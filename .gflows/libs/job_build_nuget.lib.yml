#@ load("@ytt:data", "data")

#@ load("naming.lib.yml", "job")
#@ load("tagging.lib.yml", "tagging")
#@ load("steps.lib.yml", "steps")
#@ load("common.lib.yml", "common")
#@ load("job_dependency_resolution.lib.yml", "dep")
#@ load("job_docker_build.lib.yml", "docker")


---
#@ def generate_nuget_build_job_steps(sections):
  #@ for step in docker.steps.build(sections.nuget, sections.cache_registry, push = False):
- #@ step
  #@ end
#@ image_tag = tagging.image(sections.cache_registry, sections.nuget)
- name: Create docker image with nuget packages
  run: #@ "docker create {} --name nuget".format(image_tag)
- #@ steps.checkout_private_actions()
- name: Extract nuget packages from docker image
  uses: ./.github/actions/docker-extract
  with:
    filter: #@ "ancestor={}".format(image_tag)
    container-path: #@ sections.nuget.container_result_path
    host-path: ./nuget
- name: Upload nuget packages as artifacts
  uses: actions/upload-artifact@v2
  with:
    name: Nuget packages
    path: ./nuget
#@ end
---
#@ def generate_nuget_build_job(sections):
#@ steps = generate_nuget_build_job_steps(sections)
#@ needs = ["version"]
#@ needs.extend(dep.get_job_needs(sections.nuget))
#@ return common.generate_job(sections.nuget, steps, None, sections, needs, job_name = "Build "+sections.nuget.name)
#@ end
---

