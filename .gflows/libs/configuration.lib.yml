#@ load("@ytt:struct", "struct")
---
#@ def _get_required_docker_cache_images(section):
#@ additional_cache_images = []
#@ cache_config = _get_cache_subsection(section)
#@ if type(cache_config) == type([]):
#@  additional_cache_images = cache_config # cache config is a list of images 
#@ else:
#@  additional_cache_images = getattr(cache_config,"from_images",[])
#@ end
#@ return additional_cache_images
#@ end 
---

#@ def _get_cache_subsection(section):
#@ return getattr(section,"cache_from",None)
#@ end
---
#@ def _get_cache_type(section):
#@ return getattr(_get_cache_subsection(section),"type", "registry")
#@ end
---
#@ def _get_cache_push(section):
#@ return getattr(section,"cache_push",True)
#@ end
---
#@ def _should_load_cache(section):
#@ return getattr(section,"cache_load",True)
#@ end
---
#@ def _get_file_upload_path(section):
#@ return getattr(section,"upload_path","TestResults")
#@ end
---
#@ def _get_image_run_args(section):
#@ args ="";
#@ for arg in getattr(section,"image_run_args",[]):
#@  args += "\"{}\" ".format(arg)
#@ end
#@ return args
#@ end
---
#@ def _get_single_job(section):
#@ return getattr(section, "single_job", False)
#@ end
---
#@ def _get_host_path_for_docker_extract(section):
#@ return getattr(section, "host_result_path", "./TestResults")
#@ end

#@ def _get_test_check_source_files(section):
#@ return _get_host_path_for_docker_extract(section) +"/"+ getattr(section, "test_check_files", getattr(section, "junit_result_filename", "**/*.xml"))
#@ end
---
#@ def _get_sonar_token(section):
#@ return getattr(section.sonar, "token", "${{ secrets.SONAR_TOKEN }}")
#@ end
---
#@ def _get_sonar_coverage_solution_root_path(section):
#@ return getattr(section.sonar, "coverage_solution_root_path")
#@ end
---
#@ def _get_sonar_verbose(section):
#@ return getattr(section.sonar, "verbose")
#@ end
---
#@ def _get_sonar_dotnet_build_command(section):
#@ return getattr(section.sonar, "dotnet_build_command")
#@ end
---
#@ def _get_sonar_opencover_reports_paths(section):
#@ return getattr(section.sonar, "opencover_reports_paths")
#@ end
---
#@ def _get_sonar_vstest_reports_paths(section):
#@ return getattr(section.sonar, "vstest_reports_paths")
#@ end
---
#@ def _get_sonar_organization(section):
#@ return getattr(section.sonar, "organisation")
#@ end
---
#@ def _get_sonar_project_name(section):
#@ return getattr(section.sonar, "project_name")
#@ end
---
#@ def _get_sonar_coverage_artifact_pooling_timeout_sec(section):
#@ return getattr(section.sonar, "coverage_artifact_pooling_timeout_sec")
#@ end
---
#@ def _should_generate_docker_meta(section):
#@ return getattr(section,"generate_docker_meta",False)
#@ end
---
#@ def _should_generate_sourcelink(section):
#@ return getattr(section,"checkout_repo",False)
#@ end
---
#@ def _should_output_docker_digest(section):
#@ return getattr(section, "output_docker_digest", False)
#@ end
---
#@ cfg = struct.make(get_cache_type = _get_cache_type,
#@ get_required_docker_cache_images = _get_required_docker_cache_images,
#@ get_file_upload_path = _get_file_upload_path,
#@ get_image_run_args = _get_image_run_args,
#@ should_push_cache = _get_cache_push,
#@ should_load_cache = _should_load_cache,
#@ get_single_job = _get_single_job,
#@ get_host_path_for_docker_extract = _get_host_path_for_docker_extract,
#@ get_test_check_source_files = _get_test_check_source_files,
#@ get_sonar_token = _get_sonar_token,
#@ get_sonar_coverage_solution_root_path = _get_sonar_coverage_solution_root_path,
#@ get_sonar_verbose = _get_sonar_verbose,
#@ get_sonar_dotnet_build_command = _get_sonar_dotnet_build_command,
#@ get_sonar_opencover_reports_paths = _get_sonar_opencover_reports_paths,
#@ get_sonar_vstest_reports_paths = _get_sonar_vstest_reports_paths,
#@ get_sonar_organization = _get_sonar_organization,
#@ get_sonar_project_name = _get_sonar_project_name,
#@ get_sonar_coverage_artifact_pooling_timeout_sec = _get_sonar_coverage_artifact_pooling_timeout_sec,
#@ should_generate_docker_meta = _should_generate_docker_meta,
#@ should_generate_sourcelink = _should_generate_sourcelink,
#@ should_output_docker_digest = _should_output_docker_digest)