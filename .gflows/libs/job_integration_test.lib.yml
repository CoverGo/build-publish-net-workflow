#@ load("@ytt:data", "data")
#@ load("@ytt:struct", "struct")
#@ load("tagging.lib.yml", "tagging")
#@ load("steps.lib.yml", "steps")
#@ load("common.lib.yml", "common")
#@ load("naming.lib.yml", "job")
#@ load("build_publish_steps.lib.yml", "bpsteps")
#@ load("security.lib.yml", "security")
#@ load("job_docker_build.lib.yml", "docker")
#@ load("job_dependency_resolution.lib.yml", "dep")
#@ load("configuration.lib.yml", "cfg")
---
#@ def integration_test_run_job_steps(integration_test_definition, repository_built_images, cache_registry, repository_built_images_to_publish, main_registry=None, name_override=None):
#@   step_name = integration_test_definition.name
#@   if (name_override != None):
#@     step_name = name_override
#@   end
  - #@ steps.checkout()
  - #@ steps.checkout_private_actions()
  #@ if(main_registry != None):
  - #@ steps.login_docker(main_registry)
  #@ end
#@ for compose_step in bpsteps.compose_launch_steps(integration_test_definition, repository_built_images, repository_built_images_to_publish):
  - #@ compose_step
#@ end
  - #@ bpsteps.collect_results_step(integration_test_definition,tagging.image(cache_registry, integration_test_definition))
  - name: Gather test environment logs
    if: always()
    uses: ./.github/actions/docker-diagnose
    with:
      filter: #@ bpsteps.get_compose_service_name_filter_to_diagnose(integration_test_definition)
      diagnostic-result-path: investigate
      include-compose: true
      encrypt-password: #@ security.generate_diagnostic_password(integration_test_definition)
      compose-file: #@ integration_test_definition.compose_file
      project-name: integration-test
  - #@ bpsteps.upload_artifacts_step("investigate/*","{} environment diagnostics".format(step_name) )
  - #@ bpsteps.upload_artifacts_step(cfg.get_file_upload_path(integration_test_definition),"{} results".format(step_name))
  #@ if getattr(integration_test_definition,"enable_junit_test_check",True) :
  - #@ bpsteps.publish_test_result_as_check_step(cfg.get_test_check_source_files(integration_test_definition),step_name)
    #@ end
  #@ if hasattr(integration_test_definition,"cucumber_result_filename") :
  - name: #@ "Upload {} results to Behave.Pro".format(step_name)
    if: always()
    env:
      behave_api_key: ${{ secrets.BEHAVE_PRO_TOKEN }}
      build_id: ${{ github.run_id }}
      build_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      results_file_filter: #@ cfg.get_host_path_for_docker_extract(integration_test_definition)+"/"+getattr(integration_test_definition,"cucumber_result_filename")
    run: |
      latest_commit_sha=$(git rev-parse HEAD)
      echo "commit sha: $latest_commit_sha"
      echo "test result file filter: $results_file_filter"
      for results_file in $(ls "$results_file_filter")
      do
        echo uploading "$results_file"
        curl -L -X PUT --fail https://test-reports.behave.pro/REST/1.0/bdd/report \
        -H "X-API-KEY: $behave_api_key" \
        -H "X-COMMIT-ID: $latest_commit_sha" \
        -H "X-BUILD-ID: $build_id" \
        -H "X-BUILD-URL: $build_url" \
        --data-binary @"$results_file"
      done
  - name: #@ "Publish {} results as check".format(step_name)
    uses: deblockt/cucumber-report-annotations-action@v1.11
    if: always()
    with:
      name: #@ "{} check".format(step_name)
      access-token: ${{ secrets.GITHUB_TOKEN }}
      path: #@ cfg.get_host_path_for_docker_extract(integration_test_definition)+"/"+getattr(integration_test_definition,"cucumber_result_filename")
    #@ end
  #@ end
---
#@ def _integration_test_run_job(integration_test_definition, sections, needs = ["version"], name_override = None, extra_envs = {}):
#@ if hasattr(integration_test_definition, "compose_images"):
#@  for image in integration_test_definition.compose_images:
#@    needs.append(dep.find_job_for_image(image))
#@  end
#@ end
#@
#@ repository_built_images=dep.get_repository_built_images(sections)
#@ repository_built_images_to_publish=dep.get_repository_built_images_to_publish(sections)
#@ steps_array = []
#@ steps_array.append(steps.login_docker(sections.cache_registry))
#@ steps_array.extend(integration_test_run_job_steps(integration_test_definition, repository_built_images, sections.cache_registry, repository_built_images_to_publish, getattr(sections,"main_registry",None), name_override))
#@ envs = { "RESULTS_PATH": cfg.get_host_path_for_docker_extract(integration_test_definition) }
#@ extra_envs_map = struct.decode(extra_envs)
#@ for key in extra_envs_map.keys():
#@   envs.update(key=extra_envs_map.get(key))
#@ end
#@ return common.generate_job(integration_test_definition, steps_array, envs, sections, needs, job.name.docker_run(integration_test_definition))
#@ end
---
#@ def _integration_test_build_job(integration_test_definition, sections):
#@ needs = ["version"]
#@ needs.extend(dep.get_job_needs(integration_test_definition))
#@ return docker.job.build(integration_test_definition, sections, needs)
#@ end
---
#@ def _integration_test_build_and_run_job(integration_test_definition, sections):
#@ job_name = job.name.build_and_run(integration_test_definition)

#@ needs = ["version"]
#@ needs.extend(dep.get_job_needs(integration_test_definition))

#@ if hasattr(integration_test_definition, "compose_images"):
#@  for image in integration_test_definition.compose_images:
#@    needs.append(dep.find_job_for_image(image))
#@  end
#@ end
#@
#@ repository_built_images=dep.get_repository_built_images(sections)
#@ repository_built_images_to_publish=dep.get_repository_built_images_to_publish(sections)
#@ steps = []
#@ steps.extend(docker.steps.build(integration_test_definition, sections.cache_registry))
#@ steps.extend(integration_test_run_job_steps(integration_test_definition, repository_built_images, sections.cache_registry, repository_built_images_to_publish, getattr(sections,"main_registry",None)))
#@ return common.generate_job(integration_test_definition, steps ,{"RESULTS_PATH": "TestResults", "GOOGLE_APPLICATION_CREDENTIALS": "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}"},sections, needs, job_name)
#@ end
---



#@ integration_test = struct.make(
#@  build = _integration_test_build_job,
#@  run = _integration_test_run_job,
#@  build_and_run = _integration_test_build_and_run_job)




