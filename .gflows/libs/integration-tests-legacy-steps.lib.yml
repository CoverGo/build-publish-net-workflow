#@ load("common.lib.yml", "common")
#@ load("steps.lib.yml", "steps")
#@ load("security.lib.yml", "security")
#@ load("tagging.lib.yml", "tagging")
#@ load("build_publish_steps.lib.yml", "bpsteps")
---
#@ def integration_tests_legacy_steps(repository, registry,main_registry, environment, test_suites):
- name: Checkout tests repository
  uses: actions/checkout@v3
  with:
    repository: covergo/integration-testing
    ref: #@ repository.branch
    ssh-key: ${{ secrets.INTEGRATION_TESTS_LEGACY_SSH_READONLY }}
- #@  steps.checkout_private_actions()
- #@ steps.login_docker(registry)
- #@ steps.login_docker(main_registry)
- name: Prepare environment for integration tests
  uses: ./launch_environment
  with:
    mongo-user: #@ environment.mongo_user
    mongo-password: #@ environment.mongo_password
    mongo-url: #@ environment.mongo_url
    service-under-test: #@ environment.service_under_test.name
    image-under-test: #@ tagging.candidate_image(registry, environment.service_under_test.image)

- uses: c-hive/gha-yarn-cache@v2
- name: Install yarn
  run: yarn install
#@ for test_case in test_suites.tests:
- name: #@ "Run {} tests".format(test_case)
  run: #@ "yarn {}".format(test_case)
#@ end
- name: Gather test environment logs
  if: ${{ always() }}
  uses: ./.github/actions/docker-diagnose
  with:
    filter: #@ bpsteps.get_compose_service_name_filter_to_diagnose(environment)
    diagnostic-result-path: diagnostics
    include-compose: true
    encrypt-password: #@ security.generate_diagnostic_password(environment)
- name: Stop compose
  if: ${{ always() }}
  run: docker compose down --remove-orphans
- name: Upload test environment logs as artifact
  if: ${{ always() }}
  uses: actions/upload-artifact@v4
  with:
    name: #@ "{} diagnostics".format(test_suites.name)
    path: diagnostics/*
#@ end
