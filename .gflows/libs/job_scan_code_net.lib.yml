#@ load("common.lib.yml", "common")
#@ load("configuration.lib.yml", "cfg")
#@ load("job_dependency_resolution.lib.yml", "dep")
---
#@ def generate_scan_code_net_job_steps(scan_code_net, sections):
#@ test_result_artifacts = []

#@ for unit_test_section in getattr(sections,"unit_test",[]):
#@ test_result_artifacts.append("{} results".format(unit_test_section.name))
#@ end

#@ if hasattr(sections,"integration_test") :
  #@ for integration_test_definition in sections.integration_test:
      #@ test_result_artifacts.append("{} results".format(integration_test_definition.name))
  #@ end
#@ end

- name: Checkout repository
  uses: actions/checkout@v3
  with:
    fetch-depth: 0
- name: Set up Java 17
  uses: actions/setup-java@v3
  with:
    java-version: 17
    distribution: adopt
- name: Add GitHub Packages to NuGet config
  env:
    GH_ACCOUNT: ${{ secrets.PAT_USER_READ_PACKAGES }}
    GH_TOKEN: ${{ secrets.PAT_READ_PACKAGES }}
  run: |
    dotnet nuget update source github --username ${GH_ACCOUNT} --password ${GH_TOKEN} --store-password-in-clear-text
- name: Scan
  uses: CoverGo/dotnet-parallel-sonar-scan@v1.0.1
  with:
    test-result-artifacts: #@ ",".join(test_result_artifacts)
#@ if hasattr(scan_code_net,"sonar") :
    sonar-token: #@ cfg.get_sonar_token(scan_code_net)
    #@ if hasattr(scan_code_net.sonar,"coverage_solution_root_path") :
    coverage-solution-root-path: #@ cfg.get_sonar_coverage_solution_root_path(scan_code_net)
    #@ end
    #@ if hasattr(scan_code_net.sonar,"verbose") :
    verbose: #@ cfg.get_sonar_verbose(scan_code_net)
    #@ end
    #@ if hasattr(scan_code_net.sonar,"dotnet_build_command") :
    dotnet-build-command: #@ cfg.get_sonar_dotnet_build_command(scan_code_net)
    #@ end
    #@ if hasattr(scan_code_net.sonar,"opencover_reports_paths") :
    opencover-reports-paths: #@ cfg.get_sonar_opencover_reports_paths(scan_code_net)
    #@ end
    #@ if hasattr(scan_code_net.sonar,"vstest_reports_paths") :
    vstest-reports-paths: #@ cfg.get_sonar_vstest_reports_paths(scan_code_net)
    #@ end
    #@ if hasattr(scan_code_net.sonar,"project") :
    project-key: #@ cfg.get_sonar_project(scan_code_net)
    #@ end
    #@ if hasattr(scan_code_net.sonar,"organization") :
    organization: #@ cfg.get_sonar_organization(scan_code_net)
    #@ end
    #@ if hasattr(scan_code_net.sonar,"project_name") :
    project-name: #@ cfg.get_sonar_project_name(scan_code_net)
    #@ end
    #@ if hasattr(scan_code_net.sonar,"coverage_artifact_pooling_timeout_sec") :
    coverage-artifact-pooling-timeout-sec: #@ cfg.get_sonar_coverage_artifact_pooling_timeout_sec(scan_code_net)
    #@ end
#@ else:
    sonar-token: ${{ secrets.SONAR_TOKEN }}
#@ end
  env:
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#@ end
---
#@ def generate_scan_code_net_job(scan_code_net, sections):
#@ steps = generate_scan_code_net_job_steps(scan_code_net, sections)
#@ needs = ["version"]
#@ needs.extend(dep.get_job_needs(scan_code_net))
#@ return common.generate_job(scan_code_net, steps, None, sections, needs, "Sonar scan")
#@ end
---
