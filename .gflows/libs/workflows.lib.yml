#@ load("@ytt:data", "data")
#@ load("@ytt:overlay", "overlay")

#@ def pull_request_defaults(git_settings):
  push:
    branches:
#@ for branch in git_settings.branches:
    - #@ branch
#@ end
#@ end

#@ def image_full_tag(registry, image_name, version):
#@ return "{}/{}:{}".format(registry, image_name, version)
#@ end

#@ def image_versioned_tag(registry, image_name):
#@ return image_full_tag(registry, image_name, "${{ needs.version.outputs.issue_id_slug }}")
#@ end

#@ def tag(registry, image, suffix="${{ needs.version.outputs.issue_id_slug }}"):
#@ return image_full_tag(registry.url, image.image_name, suffix)
#@ end

#@ def tag_cache(registry, image):
#@ return tag(registry, image, "${{ needs.version.outputs.issue_id_slug }}")
#@ end

#@ def tag_version(registry, image):
#@ return tag(registry, image, "${{ needs.version.outputs.app_version }}")
#@ end
---
#@ def login_docker(registry):
name: #@ "Login to {}".format(registry.name)
uses: docker/login-action@v1
with:
    registry: #@ registry.url
    username: #@ registry.user
    password: #@ registry.password
#@ end
---
#@ def checkout():
name: Checkout repository
uses: actions/checkout@v2
#@ end 
---
#@ def setup_qemu():
name: Set up QEMU
uses: docker/setup-qemu-action@v1
#@ end 
---
#@ def setup_buildx():
name: Set up Docker Buildx
uses: docker/setup-buildx-action@v1
#@ end
---  
#@ def checkout_private_actions():
name: Checkout GitHub Action Repos
uses: daspn/private-actions-checkout@v2
with:
  actions_list: '["covergo/get-version@v1","covergo/get-issue-key@v1.1","covergo/docker-extract@v1","covergo/docker-diagnose@v1.1"]'
  checkout_base_path: ./.github/actions
  app_id: ${{ secrets.PRIVATE_ACTION_APP_ID }}
  app_private_key: ${{ secrets.PRIVATE_ACTION_APP_PRIVATE_KEY }}
#@ end
---
#@ def default_switch(flag, value_default, value_not_default):
#@ if flag == "default":
#@ return value_default
#@ else:
#@ return value_not_default
#@ end
#@ end
---
#@ def docker_build_step_title(component_name):
#@ return "Build and publish {} docker image".format(component_name)
#@ end
---
#@ def build_and_push_docker(component, cache_registry, step_name="default", step_id="default", push_image=True, load_image=False, tag_build="default", provide_version_args=False):
name: #@ default_switch(step_name, docker_build_step_title(component.name), step_name)
uses: docker/build-push-action@v2
#@ if step_id != "default" : 
id: #@ step_id
#@ end
#@ if tag_build == "default" :
#@ tag_build=tag_cache(cache_registry, component)
#@ end
  
with:
  file: #@ component.dockerfile
#@ if push_image:
  push: #@ push_image
#@ end
#@ if load_image:
  load: #@ load_image
#@ end
  tags: #@ tag_build
  cache-from: #@ "type=registry,ref="+tag_cache(cache_registry, component)
  cache-to: type=inline
#@ if provide_version_args:
  build-args: |
    APP_VERSION=${{ needs.version.outputs.app_version }}
    FILE_VERSION=${{ needs.version.outputs.file_version }}
    INFORMATIONAL_VERSION=${{ needs.version.outputs.information_version }}
#@ end
#@ end
---
#@ def image_build_job(component, cache_registry, needs=["version"], main_registry="skip", tag_build="default", job_name="default", load_image=False, push_image=True, provide_version_args=False, add_if=True, add_name=False):
#@ if tag_build=="default":
#@ tag_build = tag_cache(cache_registry,component)
#@ end
#@ if add_name or job_name!="default":
#@overlay/match missing_ok=True
name: #@ default_switch(job_name, docker_build_step_title(component.name), job_name) 
#@overlay/match missing_ok=True
#@ end
runs-on: ubuntu-latest
#@overlay/match missing_ok=True
needs: 
#@ for needed in needs:
#@overlay/append
  - #@ needed
#@ end
#@ if add_if:
#@overlay/match missing_ok=True
if: github.event_name == 'push' && contains(toJson(github.event.commits), '[ci
    skip]') == false
#@ end
#@ step_id_value="docker-build-"+component.slug
#@overlay/match missing_ok=True
steps:
#@overlay/match by=overlay.index(0)
#@overlay/insert before=True
  - #@ checkout()
#@overlay/match by=overlay.index(1)
#@overlay/insert before=True
  - #@ setup_qemu()
#@overlay/match by=overlay.index(2)
#@overlay/insert before=True
  - #@ setup_buildx()
#@overlay/match by=overlay.index(3)
#@overlay/insert before=True
  - #@ login_docker(cache_registry)
#@ if main_registry!="skip":
#@overlay/match by=overlay.index(3)
#@overlay/insert before=True
  - #@ login_docker(main_registry)
#@ end
#@overlay/match by=overlay.index(4)
#@overlay/insert before=True
  - #@ build_and_push_docker(component, cache_registry, step_id=step_id_value, tag_build=tag_build, provide_version_args=provide_version_args, load_image=load_image, push_image=push_image)
#@overlay/match by=overlay.index(5)
#@overlay/insert before=True
  - name: Image digest
    run: #@ "echo ${{ steps."+step_id_value+".outputs.digest }}"
#@ end

