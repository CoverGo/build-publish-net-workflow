#@ load("@ytt:data", "data")
#@ load("@ytt:struct", "struct")
#@ load("naming.lib.yml","job")
#@ load("common.lib.yml","common")
#@ load("tagging.lib.yml","tagging")
#@ load("steps.lib.yml","steps")
#@ load("configuration.lib.yml","cfg")

---
#@ def _image_build_job_steps(component, registry, tag_build=None, job_name=None, push=True,build_versioned_image=False):
  #@ step_id_value=job.id.docker_build(component)
  #@ load_image = not push
  #@ push_image = push
  #@ cache_registry = registry
  #@ if cfg.should_generate_sourcelink(component):
- #@ steps.checkout()
  #@ end
- #@ steps.setup_buildx()
- #@ steps.login_docker(cache_registry)
  #@ if cfg.should_generate_docker_meta(component):
- #@ steps.generate_docker_meta()
  #@ end
- #@ steps.build_and_push_docker(component, cache_registry, step_id=step_id_value, tags=tag_build, load_image=load_image, push_image=push_image,build_versioned_image=build_versioned_image)
- #@ steps.echo_docker_digest(step_id_value, component)
#@ end
---
#@ def _image_build_job(component, sections, needs=["version"], tag_build=None, job_name=None, push=True, environment_variables=None):
#@ stepsYaml = _image_build_job_steps(component, sections.cache_registry, tag_build, job_name,  push)
#@ job_name = common.get_value(job_name,job.name.docker_build(component))
#@ outputs = steps.define_docker_outputs(component)
#@ return common.generate_job(component, stepsYaml, environment_variables, sections, needs, job_name, outputs=outputs)
#@ end
---
#@ _docker_jobs = struct.make( build = _image_build_job)
#@ _docker_steps = struct.make( build = _image_build_job_steps)
#@ docker = struct.make( job = _docker_jobs, steps = _docker_steps)
