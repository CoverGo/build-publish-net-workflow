# Example build-publish settings file

#@data/values
---

generic_job_example:
  name: Auth #name for the UI 
  slug: auth-service #used for job dependencies references 
 
  # optional, name of the Dockerfile to build. If presented, job will build image
  dockerfile: Dockerfile
  # optional, name of default image to export, as a result of build. 
  # Could be omitted if docker_export is presented
  # if dockerfile is missing, this field is considered as a dependency, all jobs will be searched for a one exporting this image name
  # image will be loaded into local docker to use for running or just use as a cache
  image_name: covergo/auth
  #optional. Array of parameters to pass to docker image during run.
  image_run_args: 
  - "arg1"
  - "arg 2"
  
  #optional, docker cache configuration. Can be a map or an array
  cache_from:
    
  #Map view: 
    #optional, type of docker cache to use. Possible values: "gha" and "registry"
    #gha will use GitHub Cache API via docker gha cache exporter. Experimental, fast, and limited to 5GB per repo 
    #registry will create a special "cache" images containing all layers and used only for caching, branch-specific, and store it in ghcr.io
    type: registry #[gha,registry]
    # optional, dependencies on external docker images, produced by other jobs,
    # used as an additional cache during build process.
    # Can be used only for "registry" cache type
    from_images:
      # non-empty list containing names of the images. Should match "image_name" field of some sections in the same configuration file 
      # order matters, as cache will be used in the same order as declaration
      # cache order should reflect the dependencies from Dockerfile targets
      # base targets should come first
      - covergo/auth
      - covergo/auth-test-unit
  #Array view: a shortcut for registry cache type, has the same values as 'from_images' field
  #  - covergo/auth-test-unit
  #  - covergo/auth

  #optional, if presented means this job will run docker image as stand-alone or inside compose
  #represents the path to get some artifacts from the image (compose service) as a result of the run 
  #artifacts will be treated based on other factor, e.g. it could be test results in some format, nuget package, or smth else 
  #requires image_name to locate the target image 
  container_result_path: app/TestResults


  # option section for running compose
  # if presented, means job will run compose instead of docker 
  compose_file: docker-compose.yml
  #service name in compose file to treat as SUT
  #results will be taken from this image, based on 'container_result_path' setting
  compose_service_name: cases-test-integration
  #optional, password to protect sensitive diagnostics information about compose environment
  diagnostic_password: 123
  #optional, custom filter to identify images in compose environment to collect diagnostics
  diagnostic_filter: filter*
  ## end of compose section

#Deprecated in favor of services
#service:  

#Should Only build and export docker images
services:
  - name: Auth
    slug: auth-service
    dockerfile: Dockerfile
    docker_target: build-service
    image_name: covergo/auth
    generate_docker_meta: true
    output_docker_digest: true
    build_args: 
      - NOW="$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
  - name: Auth Predeployment
    slug: auth-predeployment
    dockerfile: Dockerfile
    docker_target: build-predeployment
    image_name: covergo/auth-predeployment
    generate_docker_meta: true
    output_docker_digest: true
    cache_from:
      - covergo/auth

#Runs an existing image, can build if needed 
unit_test: #docker-build-and-job 
  - name: Unit tests
    slug: auth-test-unit
    container_result_path: app/TestResults
    image_run_args:
      - "*.filter"
      - "p aram2"
    dockerfile: Dockerfile
    image_name: covergo/auth-test-unit # image will be picked from this workflow-produced ones, if dokerfile is presented, image will be exported under this name
    single_job: false
    cache_mode: min
    cache_from:
      - covergo/auth
    upload_path: |
      bce
      !fge 
      !hep/**/.tmp
#Runs existing images in compose, can build if needed
integration_test: #array of docker-build-and-job 
  - name: Integration tests
    slug: integration-tests
    container_result_path: app/TestResults
    single_job: true
    image_name: covergo/cases-mariadb-test-integration
    compose_file: docker-compose.yml
    compose_service_name: cases-test-integration
    compose_images:
      - covergo/auth-mongo
    diagnostic_password: 123
    diagnostic_filter: filter*
    cache_type: registry
    cache_from:
      - covergo/auth
      - covergo/auth-test-unit

  - name: Acceptance tests
    slug: acceptance-tests
    container_result_path: app/TestResults
    cucumber_result_filename: cucumberResult.json
    junit_result_filename: TestResultJUnit.xml
    image_name: covergo/cases-test-acceptance
    compose_file: docker-compose.yml
    compose_service_name: cases-test-acceptance
    diagnostic_password: 123
    diagnostic_filter: filter*
    cache_from:
      - covergo/auth
      - covergo/auth-test-unit
      - covergo/cases-api-test-integration
      
  - name: Integration API tests
    slug: api-test-integration
    runner: ubuntu-latest
    enabled: true
    dockerfile: Tests.MariaDb.Integration.Dockerfile
    image_name: covergo/cases-api-test-integration
    container_result_path: app/TestResults
    test_check_files: "*.JUnit.xml"
    upload_path: abc
    compose_file: docker-compose.mariadb.yml
    compose_service_name: cases-mariadb-test-integration
    cache_from:
      - covergo/auth
      - covergo/auth-test-unit


#Only build and export docker images
additional_images: #array of docker-build-and-job 
  - name: Mongo db for Auth
    slug: auth-mongo
    dockerfile: Mongo.Dockerfile
    image_name: covergo/auth-mongo


#Runs an exising image or build it, extract nuget package and publishes it 
nuget: #docker-build-and-job with special treatment of artifact
  - name: Auth client nuget
    slug: auth-nuget
    image_name: covergo/auth-nuget
    container_result_path: app/nuget
    cache_from:
     - covergo/auth
     - covergo/auth-test-unit
    cache_push: false
    publish_after:
     - acceptance-tests
  - name: Auth client nuget with default dependencies
    slug: auth-nuget-default
    image_name: covergo/auth-nuget-default
    container_result_path: app/nuget
    cache_from:
      - covergo/auth

#Run existing images using compose, custom section
integration_tests_legacy:
  runner: self-hosted
  diagnostic_password: 123
  repository:
    url: covergo/integration-testing
    branch: ${{ github.head_ref }}
    token: ${{ github.token }}
  test_suites:
#    small_tenants:
#      name: Small tenants legacy integration tests
#      tests:
#        - aag_uat
#        - aag_uat
#        - tahoe_uat
#        - apex_uat
#        - asia_uat
    big_tenants:
      name: Big tenants legacy integration tests
      tests:
        - test_uat
        - test_uat1
        - test_uat2
        - test_uat3
        - test_uat4
        - test_uat5

  environment:
    service_under_test:
      name: auth
      image: covergo/auth
    mongo_user: ${{ secrets.MONGO_USER }}
    mongo_password: ${{ secrets.MONGO_PASSWORD }}
    mongo_url: dds-3ns0c4f035f4d3141258-pub.mongodb.rds.aliyuncs.com:3717,dds-3ns0c4f035f4d3142331-pub.mongodb.rds.aliyuncs.com:3717/admin?replicaSet=mgset-5830817&maxPoolSize=500&waitQueueMultiple=5

#optional
#default - all branches
git:
  branches:
    - master
    - main
    - F/*
    - f/*
    - R/*
    - r/*
    - B/*
    - b/*

#optional
#default
versioning:
  use_build_number: false
  use_branch_slug: true
  release_candidate_version: false
 # production_branches:
 #   - my_prod_branch
 #   - my_prod_branch2
default_timeout: 20
cache_registry:
  url: ghcr.io
  name: GitHub Container Registry
  user: ${{ github.repository_owner }}
 # password: ${{ secrets.CR_PAT_FULL }}

main_registry:
  url: registry-intl.cn-hongkong.aliyuncs.com
  name: AliCloud Container Registry
  user: ${{ secrets.ALI_CONTAINER_REGISTRY_USER }}
  password: ${{ secrets.ALI_CONTAINER_REGISTRY_PASSWORD }}
  #optional
  #default
  branches:
    - main

scan_code_net:
  name: Sonar Code
  slug: scan_code_net
  #optional
  cache_from:
    - covergo/auth
    - covergo/auth-test-unit
  sonar:
    coverage_solution_root_path: /sln
    verbose: 'true'
    dotnet_build_command: dotnet build -v q -nologo --configuration Release
    opencover_reports_paths: '/**/*.opencover.test.xml'
    vstest_reports_paths: '/**/*.test.trx'
    organisation: covergo
    project_name: Auth Service
    coverage_artifact_pooling_timeout_sec: '1200'

scan_code:
  name: Sonar scan

deploy_tenants:
  runner: self-hosted
  repository:
    url: CoverGo/Documentation
    branch: master
    token: ${{ secrets.CR_PAT_FULL }}
  
  # Legacy way
  service: covergo-auth
  image: registry-intl.cn-hongkong.aliyuncs.com/covergo/auth:${{ needs.version.outputs.app_version }}

  # New way
  images:
    - src: covergo/auth-predeployment
      dst: covergo-auth-predeployment # image name in tenant k8s config
    - src: covergo/auth
      dst: covergo-auth
  registry: main_registry

  tenants:
    - name: Tahoe
      slug: tahoe
      aws_key: ${{ secrets.TAHOE_DEPLOY_AWS_KEY }}
      credentials_path: tenants/tahoe-aws_hk-config
  triggers:
    workflows:
      - Build and publish
    conditions:
      - completed
    branches:
      - master
      - main
