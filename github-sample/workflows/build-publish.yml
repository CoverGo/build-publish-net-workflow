# File generated by gflows, do not modify
# Source: .gflows/workflows/build-publish
name: Build and publish
"on":
  push:
    branches:
    - master
    - main
    - F/*
    - f/*
    - R/*
    - r/*
    - B/*
    - b/*
jobs:
  version:
    runs-on: ubuntu-latest
    name: Get version from git tag
    outputs:
      app_version: ${{ steps.version.outputs.app_version }}
      is_production: ${{ steps.is_production_check.outputs.is_production }}
      file_version: ${{ steps.version.outputs.file_version }}
      information_version: ${{ steps.version.outputs.information_version }}
      issue_id_slug: ${{ steps.issue-key.outputs.issue_id_slug }}
      docker_image_ali_cloud_tags: ${{ steps.tags.outputs.docker_image_ali_cloud_tags }}
      docker_image_ghcr_tags: ${{ steps.tags.outputs.docker_image_ghcr_tags }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Checkout GitHub Action Repos
      uses: daspn/private-actions-checkout@v2
      with:
        actions_list: '[ "covergo/get-version@v1.6", "covergo/get-issue-key@v1.3", "covergo/docker-extract@v1.1", "covergo/docker-diagnose@v1.5", "covergo/set-compose-tags@v1.0.1", "covergo/run-in-compose@v1" ]'
        checkout_base_path: ./.github/actions
        app_id: ${{ secrets.PRIVATE_ACTION_APP_ID }}
        app_private_key: ${{ secrets.PRIVATE_ACTION_APP_PRIVATE_KEY }}
    - name: Get jira Ticket slug
      id: issue-key
      uses: ./.github/actions/get-issue-key
    - name: Get version from git tags
      id: version
      uses: ./.github/actions/get-version
      with:
        build-number: none
        pre-release-version: none
        production-branches: |-
          master
          main
    - name: Get docker image tags
      id: tags
      env:
        ghcr_versioned_tag: ghcr.io/covergo/auth:${{ steps.version.outputs.app_version }}
        ghcr_latest_tag: ghcr.io/covergo/auth:latest
        ali_cloud_versioned_tag: registry-intl.cn-hongkong.aliyuncs.com/covergo/auth:${{ steps.version.outputs.app_version }}
        ali_cloud_latest_tag: registry-intl.cn-hongkong.aliyuncs.com/covergo/auth:latest
      run: |2

        ali_cloud_tags=${ali_cloud_versioned_tag}
        ghcr_tags=${ghcr_versioned_tag}

        branch=$(git branch --show-current)
        if [[ "$branch" = 'main' || "$branch" = 'master'  ]]; then
          ali_cloud_tags="${ali_cloud_tags},${branch}"
          ghcr_tags="${ghcr_tags},${branch}"
        fi

        if [[ ${GITHUB_REF}  == refs/tags/v* ]]; then
          ali_cloud_tags="${ali_cloud_tags},${ali_cloud_latest_tag}"
          ghcr_tags="${ghcr_tags},${ghcr_latest_tag}"
        fi

        echo final tags for ghcr are:  ${ghcr_tags}
        echo final tags for ali are: ${ali_cloud_tags}
        echo ::set-output name=docker_image_ghcr_tags::${ghcr_tags}
        echo ::set-output name=docker_image_ali_cloud_tags::${ali_cloud_tags}
    - name: Is production check
      shell: bash
      id: is_production_check
      run: |
        if [[ ${{ steps.version.outputs.app_version }} =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo ::set-output name=is_production::true
        fi
  scan-code:
    name: Sonar scan
    timeout-minutes: 20
    runs-on: ubuntu-latest
    needs:
    - version
    - docker-build-auth-service
    - docker-build-auth-test-unit
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Scan
      uses: NazmiAltun/dotnet-parallel-sonar-scan@v1.1.3
      with:
        test-result-artifacts: Unit tests results,Integration tests results,Acceptance tests results,Integration API tests results
        sonar-token: ${{ secrets.SONAR_TOKEN }}
        coverage-solution-root-path: /sln
        verbose: "true"
        dotnet-build-command: dotnet build -v q -nologo --configuration Release
        opencover-reports-paths: /**/*.opencover.test.xml
        vstest-reports-paths: /**/*.test.trx
        project-name: Auth Service
        coverage-artifact-pooling-timeout-sec: "1200"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  nuget-build-auth-nuget:
    name: Build Auth client nuget
    timeout-minutes: 20
    runs-on: ubuntu-latest
    needs:
    - version
    - docker-build-auth-service
    - docker-build-auth-test-unit
    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build Auth client nuget image
      uses: docker/build-push-action@v3
      id: docker-build-auth-nuget
      with:
        file: Dockerfile
        push: false
        load: true
        tags: ghcr.io/covergo/auth-nuget:${{ needs.version.outputs.app_version }}
        cache-from: |-
          type=registry,ref=ghcr.io/covergo/auth-cache:${{ needs.version.outputs.issue_id_slug }}
          type=registry,ref=ghcr.io/covergo/auth-test-unit-cache:${{ needs.version.outputs.issue_id_slug }}
          type=registry,ref=ghcr.io/covergo/auth-nuget-cache:${{ needs.version.outputs.issue_id_slug }}
        build-args: |-
          COMMIT_SHA=${{ github.sha }}
          APP_VERSION=${{ needs.version.outputs.app_version }}
          FILE_VERSION=${{ needs.version.outputs.file_version }}
          INFORMATIONAL_VERSION=${{ needs.version.outputs.information_version }}
    - name: Image digest
      run: echo ${{ steps.docker-build-auth-nuget.outputs.digest }}
    - name: Create docker image with nuget packages
      run: docker create ghcr.io/covergo/auth-nuget:${{ needs.version.outputs.app_version }} --name nuget
    - name: Checkout GitHub Action Repos
      uses: daspn/private-actions-checkout@v2
      with:
        actions_list: '[ "covergo/get-version@v1.6", "covergo/get-issue-key@v1.3", "covergo/docker-extract@v1.1", "covergo/docker-diagnose@v1.5", "covergo/set-compose-tags@v1.0.1", "covergo/run-in-compose@v1" ]'
        checkout_base_path: ./.github/actions
        app_id: ${{ secrets.PRIVATE_ACTION_APP_ID }}
        app_private_key: ${{ secrets.PRIVATE_ACTION_APP_PRIVATE_KEY }}
    - name: Extract nuget packages from docker image
      uses: ./.github/actions/docker-extract
      with:
        filter: ancestor=ghcr.io/covergo/auth-nuget:${{ needs.version.outputs.app_version }}
        container-path: app/nuget
        host-path: ./nuget
    - name: Upload nuget packages as artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Nuget packages
        path: ./nuget
  nuget-publish-auth-nuget:
    name: Publish Auth client nuget
    timeout-minutes: 20
    runs-on: ubuntu-latest
    needs:
    - nuget-build-auth-nuget
    - acceptance-tests
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: Nuget packages
        path: ./nuget
    - name: Push generated package to GitHub registry
      run: dotnet nuget push ./nuget/*.nupkg --api-key ${{ secrets.GITHUB_TOKEN }} --skip-duplicate --source https://nuget.pkg.github.com/covergo/index.json
    - name: Push generated package symbols to GitHub registry
      run: dotnet nuget push ./nuget/*.snupkg --api-key ${{ secrets.GITHUB_TOKEN }} --skip-duplicate --source https://nuget.pkg.github.com/covergo/index.json
  nuget-build-auth-nuget-default:
    name: Build Auth client nuget with default dependencies
    timeout-minutes: 20
    runs-on: ubuntu-latest
    needs:
    - version
    - docker-build-auth-service
    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build Auth client nuget with default dependencies image
      uses: docker/build-push-action@v3
      id: docker-build-auth-nuget-default
      with:
        file: Dockerfile
        push: false
        load: true
        tags: ghcr.io/covergo/auth-nuget-default:${{ needs.version.outputs.app_version }}
        cache-from: |-
          type=registry,ref=ghcr.io/covergo/auth-cache:${{ needs.version.outputs.issue_id_slug }}
          type=registry,ref=ghcr.io/covergo/auth-nuget-default-cache:${{ needs.version.outputs.issue_id_slug }}
        cache-to: type=registry,ref=ghcr.io/covergo/auth-nuget-default-cache:${{ needs.version.outputs.issue_id_slug }},mode=max
        build-args: |-
          COMMIT_SHA=${{ github.sha }}
          APP_VERSION=${{ needs.version.outputs.app_version }}
          FILE_VERSION=${{ needs.version.outputs.file_version }}
          INFORMATIONAL_VERSION=${{ needs.version.outputs.information_version }}
    - name: Image digest
      run: echo ${{ steps.docker-build-auth-nuget-default.outputs.digest }}
    - name: Create docker image with nuget packages
      run: docker create ghcr.io/covergo/auth-nuget-default:${{ needs.version.outputs.app_version }} --name nuget
    - name: Checkout GitHub Action Repos
      uses: daspn/private-actions-checkout@v2
      with:
        actions_list: '[ "covergo/get-version@v1.6", "covergo/get-issue-key@v1.3", "covergo/docker-extract@v1.1", "covergo/docker-diagnose@v1.5", "covergo/set-compose-tags@v1.0.1", "covergo/run-in-compose@v1" ]'
        checkout_base_path: ./.github/actions
        app_id: ${{ secrets.PRIVATE_ACTION_APP_ID }}
        app_private_key: ${{ secrets.PRIVATE_ACTION_APP_PRIVATE_KEY }}
    - name: Extract nuget packages from docker image
      uses: ./.github/actions/docker-extract
      with:
        filter: ancestor=ghcr.io/covergo/auth-nuget-default:${{ needs.version.outputs.app_version }}
        container-path: app/nuget
        host-path: ./nuget
    - name: Upload nuget packages as artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Nuget packages
        path: ./nuget
  nuget-publish-auth-nuget-default:
    name: Publish Auth client nuget with default dependencies
    timeout-minutes: 20
    runs-on: ubuntu-latest
    needs:
    - nuget-build-auth-nuget-default
    - build-and-run-integration-tests
    - run-acceptance-tests
    - run-api-test-integration
    - run-auth-test-unit
    - integration-tests-legacy-small
    - integration-tests-legacy-big
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: Nuget packages
        path: ./nuget
    - name: Push generated package to GitHub registry
      run: dotnet nuget push ./nuget/*.nupkg --api-key ${{ secrets.GITHUB_TOKEN }} --skip-duplicate --source https://nuget.pkg.github.com/covergo/index.json
    - name: Push generated package symbols to GitHub registry
      run: dotnet nuget push ./nuget/*.snupkg --api-key ${{ secrets.GITHUB_TOKEN }} --skip-duplicate --source https://nuget.pkg.github.com/covergo/index.json
  docker-build-auth-service:
    name: Build Auth image
    timeout-minutes: 20
    runs-on: ubuntu-latest
    needs:
    - version
    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v3
      with:
        images: name/app
        labels: org.opencontainers.image.version=candidate-${{ needs.version.outputs.app_version }}
    - name: Build Auth image
      uses: docker/build-push-action@v3
      id: docker-build-auth-service
      with:
        file: Dockerfile
        push: true
        load: false
        labels: ${{ steps.meta.outputs.labels }}
        tags: ghcr.io/covergo/auth:candidate-${{ needs.version.outputs.app_version }}
        cache-from: type=registry,ref=ghcr.io/covergo/auth-cache:${{ needs.version.outputs.issue_id_slug }}
        cache-to: type=registry,ref=ghcr.io/covergo/auth-cache:${{ needs.version.outputs.issue_id_slug }},mode=max
        target: build-service
        build-args: COMMIT_SHA=${{ github.sha }}
    - name: Image digest
      run: echo ${{ steps.docker-build-auth-service.outputs.digest }}
  docker-build-auth-test-unit:
    name: Build Unit tests image
    timeout-minutes: 20
    runs-on: ubuntu-latest
    needs:
    - version
    - docker-build-auth-service
    env:
      RESULTS_PATH: ./TestResults
      UNIT_TEST_IMAGE_TAG: ghcr.io/covergo/auth-test-unit:${{ needs.version.outputs.app_version }}
    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build Unit tests image
      uses: docker/build-push-action@v3
      id: docker-build-auth-test-unit
      with:
        file: Dockerfile
        push: true
        load: false
        tags: ghcr.io/covergo/auth-test-unit:${{ needs.version.outputs.app_version }}
        cache-from: |-
          type=registry,ref=ghcr.io/covergo/auth-cache:${{ needs.version.outputs.issue_id_slug }}
          type=registry,ref=ghcr.io/covergo/auth-test-unit-cache:${{ needs.version.outputs.issue_id_slug }}
        cache-to: type=registry,ref=ghcr.io/covergo/auth-test-unit-cache:${{ needs.version.outputs.issue_id_slug }},mode=min
        build-args: COMMIT_SHA=${{ github.sha }}
    - name: Image digest
      run: echo ${{ steps.docker-build-auth-test-unit.outputs.digest }}
  run-auth-test-unit:
    name: Run Unit tests
    timeout-minutes: 20
    runs-on: ubuntu-latest
    needs:
    - version
    - docker-build-auth-test-unit
    env:
      RESULTS_PATH: ./TestResults
      UNIT_TEST_IMAGE_TAG: ghcr.io/covergo/auth-test-unit:${{ needs.version.outputs.app_version }}
      IMAGE_RUN_ARGS: '"*.filter" "p aram2" '
    steps:
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Checkout GitHub Action Repos
      uses: daspn/private-actions-checkout@v2
      with:
        actions_list: '[ "covergo/get-version@v1.6", "covergo/get-issue-key@v1.3", "covergo/docker-extract@v1.1", "covergo/docker-diagnose@v1.5", "covergo/set-compose-tags@v1.0.1", "covergo/run-in-compose@v1" ]'
        checkout_base_path: ./.github/actions
        app_id: ${{ secrets.PRIVATE_ACTION_APP_ID }}
        app_private_key: ${{ secrets.PRIVATE_ACTION_APP_PRIVATE_KEY }}
    - name: Pull image covergo/auth-test-unit
      run: docker pull $UNIT_TEST_IMAGE_TAG
    - name: Run Unit tests
      run: |
        id=$(docker images "$UNIT_TEST_IMAGE_TAG" -q | head -n 1)
        echo "found image id: $id"
        docker run --name unit_tests $id $IMAGE_RUN_ARGS
    - name: Collect Unit tests results
      if: always()
      uses: ./.github/actions/docker-extract
      with:
        filter: ancestor=$UNIT_TEST_IMAGE_TAG
        container-path: app/TestResults
        host-path: ./TestResults
    - name: Upload Unit tests results as artifact
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: Unit tests results
        path: "bce\n!fge \n!hep/**/.tmp\n"
    - name: Publish Unit tests results as check
      uses: docker://ghcr.io/enricomi/publish-unit-test-result-action:latest
      if: always()
      with:
        report_individual_runs: "true"
        check_name: Unit tests check
        github_token: ${{ secrets.GITHUB_TOKEN }}
        files: ./TestResults/**/*.xml
  build-and-run-integration-tests:
    name: Build and run Integration tests
    timeout-minutes: 20
    runs-on: ubuntu-latest
    needs:
    - version
    - docker-build-auth-service
    - docker-build-auth-test-unit
    - docker-build-auth-mongo
    env:
      RESULTS_PATH: TestResults
    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build Integration tests image
      uses: docker/build-push-action@v3
      id: docker-build-integration-tests
      with:
        file: Dockerfile
        push: true
        load: false
        tags: ghcr.io/covergo/cases-mariadb-test-integration:${{ needs.version.outputs.app_version }}
        cache-from: |-
          type=registry,ref=ghcr.io/covergo/auth-cache:${{ needs.version.outputs.issue_id_slug }}
          type=registry,ref=ghcr.io/covergo/auth-test-unit-cache:${{ needs.version.outputs.issue_id_slug }}
          type=registry,ref=ghcr.io/covergo/cases-mariadb-test-integration-cache:${{ needs.version.outputs.issue_id_slug }}
        cache-to: type=registry,ref=ghcr.io/covergo/cases-mariadb-test-integration-cache:${{ needs.version.outputs.issue_id_slug }},mode=max
        build-args: COMMIT_SHA=${{ github.sha }}
    - name: Image digest
      run: echo ${{ steps.docker-build-integration-tests.outputs.digest }}
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Checkout GitHub Action Repos
      uses: daspn/private-actions-checkout@v2
      with:
        actions_list: '[ "covergo/get-version@v1.6", "covergo/get-issue-key@v1.3", "covergo/docker-extract@v1.1", "covergo/docker-diagnose@v1.5", "covergo/set-compose-tags@v1.0.1", "covergo/run-in-compose@v1" ]'
        checkout_base_path: ./.github/actions
        app_id: ${{ secrets.PRIVATE_ACTION_APP_ID }}
        app_private_key: ${{ secrets.PRIVATE_ACTION_APP_PRIVATE_KEY }}
    - name: Login to AliCloud Container Registry
      uses: docker/login-action@v2
      with:
        registry: registry-intl.cn-hongkong.aliyuncs.com
        username: ${{ secrets.ALI_CONTAINER_REGISTRY_USER }}
        password: ${{ secrets.ALI_CONTAINER_REGISTRY_PASSWORD }}
    - name: Prepare compose file
      uses: ./.github/actions/set-compose-tags
      with:
        images: covergo/auth;covergo/auth-test-unit;covergo/cases-mariadb-test-integration;covergo/cases-test-acceptance;covergo/cases-api-test-integration;covergo/auth-mongo
        target-tag: ${{ needs.version.outputs.app_version }}
        compose-file: docker-compose.yml
    - name: Prepare compose file
      uses: ./.github/actions/set-compose-tags
      with:
        images: covergo/auth
        target-tag: candidate-${{ needs.version.outputs.app_version }}
        compose-file: docker-compose.yml
    - name: Run Integration tests
      uses: ./.github/actions/run-in-compose
      with:
        compose-file: docker-compose.yml
        service-name: cases-test-integration
        project-name: integration-test
    - name: Collect Integration tests results
      if: always()
      uses: ./.github/actions/docker-extract
      with:
        filter: ancestor=ghcr.io/covergo/cases-mariadb-test-integration:${{ needs.version.outputs.app_version }}
        container-path: app/TestResults
        host-path: ./TestResults
    - name: Gather test environment logs
      if: always()
      uses: ./.github/actions/docker-diagnose
      with:
        filter: name=filter*
        diagnostic-result-path: investigate
        include-compose: true
        encrypt-password: 123
        compose-file: docker-compose.yml
    - name: Upload Integration tests environment diagnostics as artifact
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: Integration tests environment diagnostics
        path: investigate/*
    - name: Upload Integration tests results as artifact
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: Integration tests results
        path: TestResults
    - name: Publish Integration tests results as check
      uses: docker://ghcr.io/enricomi/publish-unit-test-result-action:latest
      if: always()
      with:
        report_individual_runs: "true"
        check_name: Integration tests check
        github_token: ${{ secrets.GITHUB_TOKEN }}
        files: ./TestResults/**/*.xml
  docker-build-acceptance-tests:
    name: Build Acceptance tests image
    timeout-minutes: 20
    runs-on: ubuntu-latest
    needs:
    - version
    - docker-build-auth-service
    - docker-build-auth-test-unit
    - docker-build-api-test-integration
    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build Acceptance tests image
      uses: docker/build-push-action@v3
      id: docker-build-acceptance-tests
      with:
        file: Dockerfile
        push: true
        load: false
        tags: ghcr.io/covergo/cases-test-acceptance:${{ needs.version.outputs.app_version }}
        cache-from: |-
          type=registry,ref=ghcr.io/covergo/auth-cache:${{ needs.version.outputs.issue_id_slug }}
          type=registry,ref=ghcr.io/covergo/auth-test-unit-cache:${{ needs.version.outputs.issue_id_slug }}
          type=registry,ref=ghcr.io/covergo/cases-api-test-integration-cache:${{ needs.version.outputs.issue_id_slug }}
          type=registry,ref=ghcr.io/covergo/cases-test-acceptance-cache:${{ needs.version.outputs.issue_id_slug }}
        cache-to: type=registry,ref=ghcr.io/covergo/cases-test-acceptance-cache:${{ needs.version.outputs.issue_id_slug }},mode=max
        build-args: COMMIT_SHA=${{ github.sha }}
    - name: Image digest
      run: echo ${{ steps.docker-build-acceptance-tests.outputs.digest }}
  run-acceptance-tests:
    name: Run Acceptance tests
    timeout-minutes: 20
    runs-on: ubuntu-latest
    needs:
    - version
    - docker-build-acceptance-tests
    env:
      RESULTS_PATH: ./TestResults
    steps:
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Checkout GitHub Action Repos
      uses: daspn/private-actions-checkout@v2
      with:
        actions_list: '[ "covergo/get-version@v1.6", "covergo/get-issue-key@v1.3", "covergo/docker-extract@v1.1", "covergo/docker-diagnose@v1.5", "covergo/set-compose-tags@v1.0.1", "covergo/run-in-compose@v1" ]'
        checkout_base_path: ./.github/actions
        app_id: ${{ secrets.PRIVATE_ACTION_APP_ID }}
        app_private_key: ${{ secrets.PRIVATE_ACTION_APP_PRIVATE_KEY }}
    - name: Login to AliCloud Container Registry
      uses: docker/login-action@v2
      with:
        registry: registry-intl.cn-hongkong.aliyuncs.com
        username: ${{ secrets.ALI_CONTAINER_REGISTRY_USER }}
        password: ${{ secrets.ALI_CONTAINER_REGISTRY_PASSWORD }}
    - name: Prepare compose file
      uses: ./.github/actions/set-compose-tags
      with:
        images: covergo/auth;covergo/auth-test-unit;covergo/cases-mariadb-test-integration;covergo/cases-test-acceptance;covergo/cases-api-test-integration;covergo/auth-mongo
        target-tag: ${{ needs.version.outputs.app_version }}
        compose-file: docker-compose.yml
    - name: Prepare compose file
      uses: ./.github/actions/set-compose-tags
      with:
        images: covergo/auth
        target-tag: candidate-${{ needs.version.outputs.app_version }}
        compose-file: docker-compose.yml
    - name: Run Acceptance tests
      uses: ./.github/actions/run-in-compose
      with:
        compose-file: docker-compose.yml
        service-name: cases-test-acceptance
        project-name: integration-test
    - name: Collect Acceptance tests results
      if: always()
      uses: ./.github/actions/docker-extract
      with:
        filter: ancestor=ghcr.io/covergo/cases-test-acceptance:${{ needs.version.outputs.app_version }}
        container-path: app/TestResults
        host-path: ./TestResults
    - name: Gather test environment logs
      if: always()
      uses: ./.github/actions/docker-diagnose
      with:
        filter: name=filter*
        diagnostic-result-path: investigate
        include-compose: true
        encrypt-password: 123
        compose-file: docker-compose.yml
    - name: Upload Acceptance tests environment diagnostics as artifact
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: Acceptance tests environment diagnostics
        path: investigate/*
    - name: Upload Acceptance tests results as artifact
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: Acceptance tests results
        path: TestResults
    - name: Publish Acceptance tests results as check
      uses: docker://ghcr.io/enricomi/publish-unit-test-result-action:latest
      if: always()
      with:
        report_individual_runs: "true"
        check_name: Acceptance tests check
        github_token: ${{ secrets.GITHUB_TOKEN }}
        files: ./TestResults/TestResultJUnit.xml
    - name: Upload Acceptance tests results to Behave.Pro
      if: always()
      env:
        behave_api_key: ${{ secrets.BEHAVE_PRO_TOKEN }}
        build_id: ${{ github.run_id }}
        build_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        results_file_filter: ./TestResults/cucumberResult.json
      run: "latest_commit_sha=$(git rev-parse HEAD)\necho \"commit sha: $latest_commit_sha\"\necho \"test result file filter: $results_file_filter\"\nfor results_file in $(ls \"$results_file_filter\") \ndo\n  echo uploading \"$results_file\"\n  curl -L -X PUT --fail https://test-reports.behave.pro/REST/1.0/bdd/report \\\n  -H \"X-API-KEY: $behave_api_key\" \\\n  -H \"X-COMMIT-ID: $latest_commit_sha\" \\\n  -H \"X-BUILD-ID: $build_id\" \\\n  -H \"X-BUILD-URL: $build_url\" \\\n  --data-binary @\"$results_file\" \ndone\n"
    - name: Publish Acceptance tests results as check
      uses: deblockt/cucumber-report-annotations-action@v1.7
      if: always()
      with:
        name: Acceptance tests check
        access-token: ${{ secrets.GITHUB_TOKEN }}
        path: ./TestResults/cucumberResult.json
  docker-build-api-test-integration:
    name: Build Integration API tests image
    timeout-minutes: 20
    runs-on: ubuntu-latest
    needs:
    - version
    - docker-build-auth-service
    - docker-build-auth-test-unit
    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build Integration API tests image
      uses: docker/build-push-action@v3
      id: docker-build-api-test-integration
      with:
        file: Tests.MariaDb.Integration.Dockerfile
        push: true
        load: false
        tags: ghcr.io/covergo/cases-api-test-integration:${{ needs.version.outputs.app_version }}
        cache-from: |-
          type=registry,ref=ghcr.io/covergo/auth-cache:${{ needs.version.outputs.issue_id_slug }}
          type=registry,ref=ghcr.io/covergo/auth-test-unit-cache:${{ needs.version.outputs.issue_id_slug }}
          type=registry,ref=ghcr.io/covergo/cases-api-test-integration-cache:${{ needs.version.outputs.issue_id_slug }}
        cache-to: type=registry,ref=ghcr.io/covergo/cases-api-test-integration-cache:${{ needs.version.outputs.issue_id_slug }},mode=max
        build-args: COMMIT_SHA=${{ github.sha }}
    - name: Image digest
      run: echo ${{ steps.docker-build-api-test-integration.outputs.digest }}
  run-api-test-integration:
    name: Run Integration API tests
    timeout-minutes: 20
    runs-on: ubuntu-latest
    needs:
    - version
    - docker-build-api-test-integration
    env:
      RESULTS_PATH: ./TestResults
    steps:
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Checkout GitHub Action Repos
      uses: daspn/private-actions-checkout@v2
      with:
        actions_list: '[ "covergo/get-version@v1.6", "covergo/get-issue-key@v1.3", "covergo/docker-extract@v1.1", "covergo/docker-diagnose@v1.5", "covergo/set-compose-tags@v1.0.1", "covergo/run-in-compose@v1" ]'
        checkout_base_path: ./.github/actions
        app_id: ${{ secrets.PRIVATE_ACTION_APP_ID }}
        app_private_key: ${{ secrets.PRIVATE_ACTION_APP_PRIVATE_KEY }}
    - name: Login to AliCloud Container Registry
      uses: docker/login-action@v2
      with:
        registry: registry-intl.cn-hongkong.aliyuncs.com
        username: ${{ secrets.ALI_CONTAINER_REGISTRY_USER }}
        password: ${{ secrets.ALI_CONTAINER_REGISTRY_PASSWORD }}
    - name: Prepare compose file
      uses: ./.github/actions/set-compose-tags
      with:
        images: covergo/auth;covergo/auth-test-unit;covergo/cases-mariadb-test-integration;covergo/cases-test-acceptance;covergo/cases-api-test-integration;covergo/auth-mongo
        target-tag: ${{ needs.version.outputs.app_version }}
        compose-file: docker-compose.mariadb.yml
    - name: Prepare compose file
      uses: ./.github/actions/set-compose-tags
      with:
        images: covergo/auth
        target-tag: candidate-${{ needs.version.outputs.app_version }}
        compose-file: docker-compose.mariadb.yml
    - name: Run Integration API tests
      uses: ./.github/actions/run-in-compose
      with:
        compose-file: docker-compose.mariadb.yml
        service-name: cases-mariadb-test-integration
        project-name: integration-test
    - name: Collect Integration API tests results
      if: always()
      uses: ./.github/actions/docker-extract
      with:
        filter: ancestor=ghcr.io/covergo/cases-api-test-integration:${{ needs.version.outputs.app_version }}
        container-path: app/TestResults
        host-path: ./TestResults
    - name: Gather test environment logs
      if: always()
      uses: ./.github/actions/docker-diagnose
      with:
        filter: name=*
        diagnostic-result-path: investigate
        include-compose: true
        encrypt-password: ${{ secrets.DIAGNOSTIC_PASSWORD }}$GITHUB_RUN_NUMBER
        compose-file: docker-compose.mariadb.yml
    - name: Upload Integration API tests environment diagnostics as artifact
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: Integration API tests environment diagnostics
        path: investigate/*
    - name: Upload Integration API tests results as artifact
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: Integration API tests results
        path: abc
    - name: Publish Integration API tests results as check
      uses: docker://ghcr.io/enricomi/publish-unit-test-result-action:latest
      if: always()
      with:
        report_individual_runs: "true"
        check_name: Integration API tests check
        github_token: ${{ secrets.GITHUB_TOKEN }}
        files: ./TestResults/*.JUnit.xml
  docker-publish-github:
    name: Tag service image an GitHub
    timeout-minutes: 20
    runs-on: ubuntu-latest
    needs:
    - version
    - docker-build-auth-service
    - build-and-run-integration-tests
    - run-acceptance-tests
    - run-api-test-integration
    - run-auth-test-unit
    - integration-tests-legacy-small
    - integration-tests-legacy-big
    steps:
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Push Image to GitHub Container Registry
      uses: akhilerm/tag-push-action@v2.0.0
      with:
        src: ghcr.io/covergo/auth:candidate-${{ needs.version.outputs.app_version }}
        dst: ${{ needs.version.outputs.docker_image_ghcr_tags }}
  docker-publish-alicloud:
    name: Push service to AliCloud
    timeout-minutes: 20
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    needs:
    - version
    - docker-build-auth-service
    - build-and-run-integration-tests
    - run-acceptance-tests
    - run-api-test-integration
    - run-auth-test-unit
    - integration-tests-legacy-small
    - integration-tests-legacy-big
    steps:
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Login to AliCloud Container Registry
      uses: docker/login-action@v2
      with:
        registry: registry-intl.cn-hongkong.aliyuncs.com
        username: ${{ secrets.ALI_CONTAINER_REGISTRY_USER }}
        password: ${{ secrets.ALI_CONTAINER_REGISTRY_PASSWORD }}
    - name: Push Image to AliCloud Container Registry
      uses: akhilerm/tag-push-action@v2.0.0
      with:
        src: ghcr.io/covergo/auth:${{ needs.version.outputs.app_version }}
        dst: ${{ needs.version.outputs.docker_image_ali_cloud_tags }}
  integration-tests-legacy-big:
    name: Run legacy integration big tenants tests
    runs-on: self-hosted
    timeout-minutes: 20
    needs:
    - version
    - docker-build-auth-service
    steps:
    - name: Checkout tests repository
      uses: actions/checkout@v3
      with:
        repository: covergo/integration-testing
        ref: ${{ github.head_ref }}
        token: ${{ github.token }}
    - name: Checkout GitHub Action Repos
      uses: daspn/private-actions-checkout@v2
      with:
        actions_list: '[ "covergo/get-version@v1.6", "covergo/get-issue-key@v1.3", "covergo/docker-extract@v1.1", "covergo/docker-diagnose@v1.5", "covergo/set-compose-tags@v1.0.1", "covergo/run-in-compose@v1" ]'
        checkout_base_path: ./.github/actions
        app_id: ${{ secrets.PRIVATE_ACTION_APP_ID }}
        app_private_key: ${{ secrets.PRIVATE_ACTION_APP_PRIVATE_KEY }}
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Login to AliCloud Container Registry
      uses: docker/login-action@v2
      with:
        registry: registry-intl.cn-hongkong.aliyuncs.com
        username: ${{ secrets.ALI_CONTAINER_REGISTRY_USER }}
        password: ${{ secrets.ALI_CONTAINER_REGISTRY_PASSWORD }}
    - name: Prepare environment for integration tests
      uses: ./launch_environment
      with:
        mongo-user: ${{ secrets.MONGO_USER }}
        mongo-password: ${{ secrets.MONGO_PASSWORD }}
        mongo-url: dds-3ns0c4f035f4d3141258-pub.mongodb.rds.aliyuncs.com:3717,dds-3ns0c4f035f4d3142331-pub.mongodb.rds.aliyuncs.com:3717/admin?replicaSet=mgset-5830817&maxPoolSize=500&waitQueueMultiple=5
        service-under-test: auth
        image-under-test: ghcr.io/covergo/auth:candidate-${{ needs.version.outputs.app_version }}
    - uses: c-hive/gha-yarn-cache@v2
    - name: Install yarn
      run: yarn install
    - name: Run test_uat tests
      run: yarn test_uat
    - name: Run test_uat1 tests
      run: yarn test_uat1
    - name: Run test_uat2 tests
      run: yarn test_uat2
    - name: Run test_uat3 tests
      run: yarn test_uat3
    - name: Run test_uat4 tests
      run: yarn test_uat4
    - name: Run test_uat5 tests
      run: yarn test_uat5
    - name: Gather test environment logs
      if: ${{ always() }}
      uses: ./.github/actions/docker-diagnose
      with:
        filter: name=*
        diagnostic-result-path: diagnostics
        include-compose: true
        encrypt-password: ${{ secrets.DIAGNOSTIC_PASSWORD }}$GITHUB_RUN_NUMBER
    - name: Stop compose
      if: ${{ always() }}
      run: docker-compose down --remove-orphans
    - name: Upload test environment logs as artifact
      if: ${{ always() }}
      uses: actions/upload-artifact@v2
      with:
        name: Big tenants legacy integration tests diagnostics
        path: diagnostics/*
  docker-build-auth-mongo:
    name: Build Mongo db for Auth image
    timeout-minutes: 20
    runs-on: ubuntu-latest
    needs:
    - version
    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build Mongo db for Auth image
      uses: docker/build-push-action@v3
      id: docker-build-auth-mongo
      with:
        file: Mongo.Dockerfile
        push: true
        load: false
        tags: ghcr.io/covergo/auth-mongo:${{ needs.version.outputs.app_version }}
        cache-from: type=registry,ref=ghcr.io/covergo/auth-mongo-cache:${{ needs.version.outputs.issue_id_slug }}
        cache-to: type=registry,ref=ghcr.io/covergo/auth-mongo-cache:${{ needs.version.outputs.issue_id_slug }},mode=max
        build-args: COMMIT_SHA=${{ github.sha }}
    - name: Image digest
      run: echo ${{ steps.docker-build-auth-mongo.outputs.digest }}
