# File generated by gflows, do not modify
# Source: .gflows/workflows/build-publish
name: Build and publish
"on":
  push:
    branches:
    - master
    - f/*
    - r/*
    - b/*
jobs:
  version:
    if: github.event_name == 'push' && contains(toJson(github.event.commits), '[ci
      skip]') == false
    runs-on: ubuntu-latest
    name: Get version from git tag
    outputs:
      app_version: ${{ steps.version.outputs.app_version }}
      file_version: ${{ steps.version.outputs.file_version }}
      information_version: ${{ steps.version.outputs.information_version }}
      issue_id_slug: ${{ steps.issue-key.outputs.issue_id_slug }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Checkout GitHub Action Repos
      uses: daspn/private-actions-checkout@v2
      with:
        actions_list: '["covergo/get-version@v1","covergo/get-issue-key@v1.1","covergo/docker-extract@v1","covergo/docker-diagnose@v1.1"]'
        checkout_base_path: ./.github/actions
        app_id: ${{ secrets.PRIVATE_ACTION_APP_ID }}
        app_private_key: ${{ secrets.PRIVATE_ACTION_APP_PRIVATE_KEY }}
    - name: Get version from git tags
      id: version
      uses: ./.github/actions/get-version
    - name: Get jira Ticket slug
      id: issue-key
      uses: ./.github/actions/get-issue-key
  nuget-build:
    name: Build nuget package
    runs-on: ubuntu-latest
    needs:
    - version
    if: github.event_name == 'push' && contains(toJson(github.event.commits), '[ci
      skip]') == false
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT_FULL }}
    - name: Build and publish Auth client nuget docker image
      uses: docker/build-push-action@v2
      id: docker-build-auth-nuget
      with:
        file: ./Nuget.Dockerfile
        push: true
        tags: ghcr.io/covergo/auth-nuget:${{ needs.version.outputs.issue_id_slug }}
        cache-from: type=registry,ref=ghcr.io/covergo/auth-nuget:${{ needs.version.outputs.issue_id_slug
          }}
        cache-to: type=inline
        build-args: |
          APP_VERSION=${{ needs.version.outputs.app_version }}
          FILE_VERSION=${{ needs.version.outputs.file_version }}
          INFORMATIONAL_VERSION=${{ needs.version.outputs.information_version }}
    - name: Image digest
      run: echo ${{ steps.docker-build-auth-nuget.outputs.digest }}
  docker-build-service:
    name: Build Auth image
    runs-on: ubuntu-latest
    needs:
    - version
    if: github.event_name == 'push' && contains(toJson(github.event.commits), '[ci
      skip]') == false
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT_FULL }}
    - name: Build and publish Auth docker image
      uses: docker/build-push-action@v2
      id: docker-build-auth-service
      with:
        file: Dockerfile
        push: true
        tags: ghcr.io/covergo/auth:${{ needs.version.outputs.issue_id_slug }}
        cache-from: type=registry,ref=ghcr.io/covergo/auth:${{ needs.version.outputs.issue_id_slug
          }}
        cache-to: type=inline
    - name: Image digest
      run: echo ${{ steps.docker-build-auth-service.outputs.digest }}
  docker-build-service-test-unit:
    name: Build and run unit tests image
    env:
      RESULTS_PATH: TestResults
      UNIT_TEST_IMAGE_TAG: ghcr.io/covergo/auth-test-unit:${{ needs.version.outputs.issue_id_slug
        }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT_FULL }}
    - name: Build and publish Unit tests docker image
      uses: docker/build-push-action@v2
      id: docker-build-auth-test-unit
      with:
        file: Tests.Unit.Dockerfile
        push: true
        tags: ghcr.io/covergo/auth-test-unit:${{ needs.version.outputs.issue_id_slug
          }}
        cache-from: type=registry,ref=ghcr.io/covergo/auth-test-unit:${{ needs.version.outputs.issue_id_slug
          }}
        cache-to: type=inline
    - name: Image digest
      run: echo ${{ steps.docker-build-auth-test-unit.outputs.digest }}
    - name: dummy step for proper ordering
      run: exit 0
    - name: Load unit test image into local docker
      uses: docker/build-push-action@v2
      with:
        file: Tests.Unit.Dockerfile
        load: true
        tags: ghcr.io/covergo/auth-test-unit:${{ needs.version.outputs.issue_id_slug
          }}
        cache-from: type=registry,ref=ghcr.io/covergo/auth-test-unit:${{ needs.version.outputs.issue_id_slug
          }}
        cache-to: type=inline
    - name: Run unit tests
      run: |
        id=$(docker images "$UNIT_TEST_IMAGE_TAG" -q | head -n 1)
        echo "found image id: $id"
        docker run --name unit_tests $id
    - name: Checkout GitHub Action Repos
      uses: daspn/private-actions-checkout@v2
      with:
        actions_list: '["covergo/get-version@v1","covergo/get-issue-key@v1.1","covergo/docker-extract@v1","covergo/docker-diagnose@v1.1"]'
        checkout_base_path: ./.github/actions
        app_id: ${{ secrets.PRIVATE_ACTION_APP_ID }}
        app_private_key: ${{ secrets.PRIVATE_ACTION_APP_PRIVATE_KEY }}
    - name: Get unit tests results
      if: always()
      uses: ./.github/actions/docker-extract
      with:
        filter: ancestor=$UNIT_TEST_IMAGE_TAG
        container-path: app/TestResults
        host-path: ./TestResults
    - name: Upload unit test results
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: Unit test results
        path: ${{ env.RESULTS_PATH }}
    - name: Publish unit test results as Check
      uses: docker://ghcr.io/enricomi/publish-unit-test-result-action:latest
      if: always()
      with:
        report_individual_runs: "true"
        check_name: Unit Tests Results
        github_token: ${{ secrets.GITHUB_TOKEN }}
        files: ${{ env.RESULTS_PATH }}/**/*.xml
    runs-on: ubuntu-latest
    needs:
    - version
    if: github.event_name == 'push' && contains(toJson(github.event.commits), '[ci
      skip]') == false
  docker-build-tests-integration:
    name: Build int test image
    runs-on: ubuntu-latest
    needs:
    - version
    if: github.event_name == 'push' && contains(toJson(github.event.commits), '[ci
      skip]') == false
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT_FULL }}
    - name: Build and publish Integration tests docker image
      uses: docker/build-push-action@v2
      id: docker-build-auth-test-integration
      with:
        file: Tests.Integration.Dockerfile
        push: true
        tags: ghcr.io/covergo/auth-test-integration:${{ needs.version.outputs.issue_id_slug
          }}
        cache-from: type=registry,ref=ghcr.io/covergo/auth-test-integration:${{ needs.version.outputs.issue_id_slug
          }}
        cache-to: type=inline
    - name: Image digest
      run: echo ${{ steps.docker-build-auth-test-integration.outputs.digest }}
  integration-tests:
    runs-on: ubuntu-latest
    name: Run integration tests
    needs:
    - docker-build-service
    - docker-build-tests-integration
    - version
    - docker-build-mongo
    env:
      RESULTS_PATH: TestResults
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Checkout GitHub Action Repos
      uses: daspn/private-actions-checkout@v2
      with:
        actions_list: '["covergo/get-version@v1","covergo/get-issue-key@v1.1","covergo/docker-extract@v1","covergo/docker-diagnose@v1.1"]'
        checkout_base_path: ./.github/actions
        app_id: ${{ secrets.PRIVATE_ACTION_APP_ID }}
        app_private_key: ${{ secrets.PRIVATE_ACTION_APP_PRIVATE_KEY }}
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT_FULL }}
    - name: Run integration tests
      env:
        issue_slug: ${{ needs.version.outputs.issue_id_slug }}
      run: "#set docker image tags to issue slug to hit cache\nsed -i -e 's/:latest/:$issue_slug/g'
        docker-compose.yml\ndocker-compose pull\ndocker ps -a\ndocker-compose -f docker-compose.yml
        up --exit-code-from covergo-auth-tests-integration \n"
    - name: Collect integration test results
      if: ${{ always() }}
      uses: ./.github/actions/docker-extract
      with:
        filter: ancestor=ghcr.io/covergo/auth-test-integration:${{ needs.version.outputs.issue_id_slug
          }}
        container-path: app/TestResults
        host-path: ./TestResults
    - name: Gather test environment logs
      if: ${{ always() }}
      uses: ./.github/actions/docker-diagnose
      with:
        filter: name=covergo*
        diagnostic-result-path: investigate
        include-compose: true
    - name: Upload environment logs
      if: ${{ always() }}
      uses: actions/upload-artifact@v2
      with:
        name: Investigation results
        path: investigate/*
    - name: Upload integration test results
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: Integration test results
        path: ${{ env.RESULTS_PATH }}
    - name: Publish integration tests results as check
      uses: docker://ghcr.io/enricomi/publish-unit-test-result-action:latest
      if: always()
      with:
        report_individual_runs: "true"
        check_name: Integration Tests Results
        github_token: ${{ secrets.GITHUB_TOKEN }}
        files: ${{ env.RESULTS_PATH }}/**/*.xml
  docker-publish-github:
    name: Publish Auth to GitHub
    needs:
    - integration-tests
    - docker-build-service-test-unit
    - version
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(toJson(github.event.commits), '[ci
      skip]') == false
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT_FULL }}
    - name: Build and publish Auth docker image
      uses: docker/build-push-action@v2
      id: docker-build-auth-service
      with:
        file: Dockerfile
        push: true
        tags: ghcr.io/covergo/auth:${{ needs.version.outputs.app_version }}
        cache-from: type=registry,ref=ghcr.io/covergo/auth:${{ needs.version.outputs.issue_id_slug
          }}
        cache-to: type=inline
    - name: Image digest
      run: echo ${{ steps.docker-build-auth-service.outputs.digest }}
  docker-publish-alicloud:
    name: Publish Auth to AliCloud
    if: github.ref == 'refs/head/master'
    needs:
    - integration-tests
    - docker-build-service-test-unit
    - version
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT_FULL }}
    - name: Build and publish Auth docker image
      uses: docker/build-push-action@v2
      id: docker-build-auth-service
      with:
        file: Dockerfile
        push: true
        tags: registry-intl.cn-hongkong.aliyuncs.com/covergo/auth:${{ needs.version.outputs.app_version
          }}
        cache-from: type=registry,ref=ghcr.io/covergo/auth:${{ needs.version.outputs.issue_id_slug
          }}
        cache-to: type=inline
    - name: Image digest
      run: echo ${{ steps.docker-build-auth-service.outputs.digest }}
  nuget-publish:
    runs-on: ubuntu-latest
    needs:
    - integration-tests
    - nuget-build
    - docker-build-service-test-unit
    - version
    name: Publish Nuget package
    env:
      IMAGE_TAG: ghcr.io/covergo/auth-nuget:${{ needs.version.outputs.issue_id_slug
        }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT_FULL }}
    - name: Build and publish Auth client nuget docker image
      uses: docker/build-push-action@v2
      id: docker-build-auth-nuget
      with:
        file: ./Nuget.Dockerfile
        load: true
        tags: ghcr.io/covergo/auth-nuget:${{ needs.version.outputs.issue_id_slug }}
        cache-from: type=registry,ref=ghcr.io/covergo/auth-nuget:${{ needs.version.outputs.issue_id_slug
          }}
        cache-to: type=inline
        build-args: |
          APP_VERSION=${{ needs.version.outputs.app_version }}
          FILE_VERSION=${{ needs.version.outputs.file_version }}
          INFORMATIONAL_VERSION=${{ needs.version.outputs.information_version }}
    - name: Image digest
      run: echo ${{ steps.docker-build-auth-nuget.outputs.digest }}
    - name: Checkout GitHub Action Repos
      uses: daspn/private-actions-checkout@v2
      with:
        actions_list: '["covergo/get-version@v1","covergo/get-issue-key@v1.1","covergo/docker-extract@v1","covergo/docker-diagnose@v1.1"]'
        checkout_base_path: ./.github/actions
        app_id: ${{ secrets.PRIVATE_ACTION_APP_ID }}
        app_private_key: ${{ secrets.PRIVATE_ACTION_APP_PRIVATE_KEY }}
    - name: Create docker image with nuget packages
      run: docker create $IMAGE_TAG --name nuget
    - name: Copy nuget packages from docker image
      uses: ./.github/actions/docker-extract
      with:
        filter: ancestor=$IMAGE_TAG
        container-path: app/nuget
        host-path: ./nuget
    - name: Push generated package to GitHub registry
      run: dotnet nuget push ./nuget/*.nupkg --api-key ${{ secrets.GITHUB_TOKEN }}
        --source https://nuget.pkg.github.com/covergo/index.json
    - name: Push generated package symbols to GitHub registry
      run: dotnet nuget push ./nuget/*.snupkg --api-key ${{ secrets.GITHUB_TOKEN }}
        --source https://nuget.pkg.github.com/covergo/index.json
    if: github.event_name == 'push' && contains(toJson(github.event.commits), '[ci
      skip]') == false
  docker-build-mongo:
    runs-on: ubuntu-latest
    needs:
    - version
    if: github.event_name == 'push' && contains(toJson(github.event.commits), '[ci
      skip]') == false
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT_FULL }}
    - name: Build and publish Mongo db for Auth docker image
      uses: docker/build-push-action@v2
      id: docker-build-auth-mongo
      with:
        file: Mongo.Dockerfile
        push: true
        tags: ghcr.io/covergo/auth-mongo:${{ needs.version.outputs.issue_id_slug }}
        cache-from: type=registry,ref=ghcr.io/covergo/auth-mongo:${{ needs.version.outputs.issue_id_slug
          }}
        cache-to: type=inline
    - name: Image digest
      run: echo ${{ steps.docker-build-auth-mongo.outputs.digest }}
