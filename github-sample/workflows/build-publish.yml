# File generated by gflows, do not modify
# Source: .gflows/workflows/build-publish
name: Build and publish
"on":
  push:
    branches:
    - master
    - main
    - F/*
    - f/*
    - R/*
    - r/*
    - B/*
    - b/*
jobs:
  version:
    runs-on: ubuntu-latest
    name: Get version from git tag
    outputs:
      app_version: ${{ steps.version.outputs.app_version }}
      file_version: ${{ steps.version.outputs.file_version }}
      information_version: ${{ steps.version.outputs.information_version }}
      issue_id_slug: ${{ steps.issue-key.outputs.issue_id_slug }}
      docker_image_ali_cloud_tags: ${{ steps.tags.outputs.docker_image_ali_cloud_tags }}
      docker_image_ghcr_tags: ${{ steps.tags.outputs.docker_image_ghcr_tags }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Checkout GitHub Action Repos
      uses: daspn/private-actions-checkout@v2
      with:
        actions_list: '[ "covergo/get-version@v1.4", "covergo/get-issue-key@v1.2", "covergo/docker-extract@v1", "covergo/docker-diagnose@v1.5", "covergo/set-compose-tags@v1", "covergo/run-in-compose@v1" ]'
        checkout_base_path: ./.github/actions
        app_id: ${{ secrets.PRIVATE_ACTION_APP_ID }}
        app_private_key: ${{ secrets.PRIVATE_ACTION_APP_PRIVATE_KEY }}
    - name: Get jira Ticket slug
      id: issue-key
      uses: ./.github/actions/get-issue-key
    - name: Get version from git tags
      id: version
      uses: ./.github/actions/get-version
      with:
        build-number: none
        pre-release-version: ${{ steps.issue-key.outputs.issue_id_slug }}
    - name: Get docker image tags
      id: tags
      env:
        ghcr_versioned_tag: ghcr.io/covergo/auth:${{ steps.version.outputs.app_version }}
        ghcr_latest_tag: ghcr.io/covergo/auth:latest
        ali_cloud_versioned_tag: registry-intl.cn-hongkong.aliyuncs.com/covergo/auth:${{ steps.version.outputs.app_version }}
        ali_cloud_latest_tag: registry-intl.cn-hongkong.aliyuncs.com/covergo/auth:latest
      run: "\nali_cloud_tags=${ali_cloud_versioned_tag}\nghcr_tags=${ghcr_versioned_tag}\n \ngit_ref=${{ github.ref }}\nbranch=${git_ref#refs/heads/}\nif [[ \"$branch\" = 'main' || \"$branch\" = 'master'  ]]; then\n  ali_cloud_tags=\"${ali_cloud_tags},${ali_cloud_latest_tag}\"\n  ghcr_tags=\"${ghcr_tags},${ghcr_latest_tag}\"\nfi\n \necho final tags for ghcr are:  ${ghcr_tags}\necho final tags for ali are: ${ali_cloud_tags}\necho ::set-output name=docker_image_ghcr_tags::${ghcr_tags}\necho ::set-output name=docker_image_ali_cloud_tags::${ali_cloud_tags}\n \n"
  nuget-build:
    name: Build nuget package
    timeout-minutes: 30
    needs:
    - version
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(toJson(github.event.commits), '[ci skip]') == false
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT_FULL }}
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Build and publish Auth client nuget docker image
      uses: docker/build-push-action@v2
      id: docker-build-auth-nuget
      with:
        file: ./Nuget.Dockerfile
        push: true
        tags: ghcr.io/covergo/auth-nuget:${{ needs.version.outputs.issue_id_slug }}
        cache-from: type=registry,ref=ghcr.io/covergo/auth-nuget:${{ needs.version.outputs.issue_id_slug }}
        cache-to: type=inline
        build-args: |
          APP_VERSION=${{ needs.version.outputs.app_version }}
          FILE_VERSION=${{ needs.version.outputs.file_version }}
          INFORMATIONAL_VERSION=${{ needs.version.outputs.information_version }}
    - name: Image digest
      run: echo ${{ steps.docker-build-auth-nuget.outputs.digest }}
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT_FULL }}
    - name: Build and publish Auth client nuget docker image
      uses: docker/build-push-action@v2
      id: docker-build-auth-nuget
      with:
        file: ./Nuget.Dockerfile
        push: true
        tags: ghcr.io/covergo/auth-nuget:${{ needs.version.outputs.issue_id_slug }}
        cache-from: type=registry,ref=ghcr.io/covergo/auth-nuget:${{ needs.version.outputs.issue_id_slug }}
        cache-to: type=inline
        build-args: |
          APP_VERSION=${{ needs.version.outputs.app_version }}
          FILE_VERSION=${{ needs.version.outputs.file_version }}
          INFORMATIONAL_VERSION=${{ needs.version.outputs.information_version }}
    - name: Image digest
      run: echo ${{ steps.docker-build-auth-nuget.outputs.digest }}
  docker-build-service:
    name: Build Auth image
    timeout-minutes: 30
    needs:
    - version
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(toJson(github.event.commits), '[ci skip]') == false
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT_FULL }}
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Build and publish Auth docker image
      uses: docker/build-push-action@v2
      id: docker-build-auth-service
      with:
        file: Dockerfile
        push: true
        tags: ghcr.io/covergo/auth:${{ needs.version.outputs.issue_id_slug }}
        cache-from: type=registry,ref=ghcr.io/covergo/auth:${{ needs.version.outputs.issue_id_slug }}
        cache-to: type=inline
    - name: Image digest
      run: echo ${{ steps.docker-build-auth-service.outputs.digest }}
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT_FULL }}
    - name: Build and publish Auth docker image
      uses: docker/build-push-action@v2
      id: docker-build-auth-service
      with:
        file: Dockerfile
        push: true
        tags: ghcr.io/covergo/auth:${{ needs.version.outputs.issue_id_slug }}
        cache-from: type=registry,ref=ghcr.io/covergo/auth:${{ needs.version.outputs.issue_id_slug }}
        cache-to: type=inline
    - name: Image digest
      run: echo ${{ steps.docker-build-auth-service.outputs.digest }}
  build-and-run-auth-test-unit:
    name: Build and run Unit tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      RESULTS_PATH: TestResults
      UNIT_TEST_IMAGE_TAG: ghcr.io/covergo/auth-test-unit:${{ needs.version.outputs.issue_id_slug }}
    needs:
    - version
    steps:
    - name: Load Unit tests image into local docker
      uses: docker/build-push-action@v2
      with:
        file: Tests.Unit.Dockerfile
        load: true
        tags: ghcr.io/covergo/auth-test-unit:${{ needs.version.outputs.issue_id_slug }}
        cache-from: type=registry,ref=ghcr.io/covergo/auth-test-unit:${{ needs.version.outputs.issue_id_slug }}
        cache-to: type=inline
        target: TestTarget
    - name: Run Unit tests
      run: |
        id=$(docker images "$UNIT_TEST_IMAGE_TAG" -q | head -n 1)
        echo "found image id: $id"
        docker run --name unit_tests $id
    - name: Checkout GitHub Action Repos
      uses: daspn/private-actions-checkout@v2
      with:
        actions_list: '[ "covergo/get-version@v1.4", "covergo/get-issue-key@v1.2", "covergo/docker-extract@v1", "covergo/docker-diagnose@v1.5", "covergo/set-compose-tags@v1", "covergo/run-in-compose@v1" ]'
        checkout_base_path: ./.github/actions
        app_id: ${{ secrets.PRIVATE_ACTION_APP_ID }}
        app_private_key: ${{ secrets.PRIVATE_ACTION_APP_PRIVATE_KEY }}
    - name: Get Unit tests results
      if: always()
      uses: ./.github/actions/docker-extract
      with:
        filter: ancestor=$UNIT_TEST_IMAGE_TAG
        container-path: app/TestResults
        host-path: ./TestResults
    - name: Upload Unit tests results
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: Unit tests results
        path: ${{ env.RESULTS_PATH }}
    - name: Publish Unit tests results as Check
      uses: docker://ghcr.io/enricomi/publish-unit-test-result-action:latest
      if: always()
      with:
        report_individual_runs: "true"
        check_name: Unit tests Results
        github_token: ${{ secrets.GITHUB_TOKEN }}
        files: ${{ env.RESULTS_PATH }}/**/*.xml
  docker-build-integration-tests:
    name: Build Integration tests
    timeout-minutes: 30
    runs-on: ubuntu-latest
    needs:
    - version
    if: github.event_name == 'push' && contains(toJson(github.event.commits), '[ci skip]') == false
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT_FULL }}
    - name: Build and publish Integration tests docker image
      uses: docker/build-push-action@v2
      id: docker-build-integration-tests
      with:
        file: Tests.Integration.Dockerfile
        push: true
        tags: ghcr.io/covergo/cases-mariadb-test-integration:${{ needs.version.outputs.issue_id_slug }}
        cache-from: type=registry,ref=ghcr.io/covergo/cases-mariadb-test-integration:${{ needs.version.outputs.issue_id_slug }}
        cache-to: type=inline
    - name: Image digest
      run: echo ${{ steps.docker-build-integration-tests.outputs.digest }}
  run-integration-tests:
    runs-on: ubuntu-latest
    name: Run Integration tests
    timeout-minutes: 30
    needs:
    - docker-build-service
    - version
    - docker-build-integration-tests
    - docker-build-acceptance-tests
    - docker-build-mariadb-test-integration
    env:
      RESULTS_PATH: TestResults
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Checkout GitHub Action Repos
      uses: daspn/private-actions-checkout@v2
      with:
        actions_list: '[ "covergo/get-version@v1.4", "covergo/get-issue-key@v1.2", "covergo/docker-extract@v1", "covergo/docker-diagnose@v1.5", "covergo/set-compose-tags@v1", "covergo/run-in-compose@v1" ]'
        checkout_base_path: ./.github/actions
        app_id: ${{ secrets.PRIVATE_ACTION_APP_ID }}
        app_private_key: ${{ secrets.PRIVATE_ACTION_APP_PRIVATE_KEY }}
    - name: Login to AliCloud Container Registry
      uses: docker/login-action@v1
      with:
        registry: registry-intl.cn-hongkong.aliyuncs.com
        username: ${{ secrets.ALI_CONTAINER_REGISTRY_USER }}
        password: ${{ secrets.ALI_CONTAINER_REGISTRY_PASSWORD }}
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT_FULL }}
    - name: Prepare compose file
      uses: ./.github/actions/set-compose-tags
      with:
        images: covergo/auth;covergo/auth-test-unit;covergo/cases-mariadb-test-integration;covergo/cases-mariadb-test-integration;covergo/cases-mariadb-test-integration
        target-tag: ${{ needs.version.outputs.issue_id_slug }}
        compose-file: docker-compose.yml
    - name: Run Integration tests
      uses: ./.github/actions/run-in-compose
      with:
        compose-file: docker-compose.yml
        service-name: cases-test-integration
        project-name: integration-test
    - name: Collect Integration tests results
      if: always()
      uses: ./.github/actions/docker-extract
      with:
        filter: ancestor=ghcr.io/covergo/cases-mariadb-test-integration:${{ needs.version.outputs.issue_id_slug }}
        container-path: app/TestResults
        host-path: ./TestResults
    - name: Gather test environment logs
      if: always()
      uses: ./.github/actions/docker-diagnose
      with:
        filter: name=filter*
        diagnostic-result-path: investigate
        include-compose: true
        encrypt-password: 123
        compose-file: docker-compose.yml
    - name: Upload environment logs
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: Integration tests environment diagnostics
        path: investigate/*
    - name: Upload Integration tests results
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: Integration tests results
        path: ${{ env.RESULTS_PATH }}
    - name: Publish Integration tests results as check
      uses: docker://ghcr.io/enricomi/publish-unit-test-result-action:latest
      if: always()
      with:
        report_individual_runs: "true"
        check_name: Integration tests check
        github_token: ${{ secrets.GITHUB_TOKEN }}
        files: ${{ env.RESULTS_PATH }}/**/*.xml
  docker-build-acceptance-tests:
    name: Build Acceptance tests
    timeout-minutes: 30
    runs-on: ubuntu-latest
    needs:
    - version
    if: github.event_name == 'push' && contains(toJson(github.event.commits), '[ci skip]') == false
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT_FULL }}
    - name: Build and publish Acceptance tests docker image
      uses: docker/build-push-action@v2
      id: docker-build-acceptance-tests
      with:
        file: Tests.Acceptance.Dockerfile
        push: true
        tags: ghcr.io/covergo/cases-mariadb-test-integration:${{ needs.version.outputs.issue_id_slug }}
        cache-from: type=registry,ref=ghcr.io/covergo/cases-mariadb-test-integration:${{ needs.version.outputs.issue_id_slug }}
        cache-to: type=inline
    - name: Image digest
      run: echo ${{ steps.docker-build-acceptance-tests.outputs.digest }}
  run-acceptance-tests:
    runs-on: ubuntu-latest
    name: Run Acceptance tests
    timeout-minutes: 30
    needs:
    - docker-build-service
    - version
    - docker-build-integration-tests
    - docker-build-acceptance-tests
    - docker-build-mariadb-test-integration
    env:
      RESULTS_PATH: TestResults
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Checkout GitHub Action Repos
      uses: daspn/private-actions-checkout@v2
      with:
        actions_list: '[ "covergo/get-version@v1.4", "covergo/get-issue-key@v1.2", "covergo/docker-extract@v1", "covergo/docker-diagnose@v1.5", "covergo/set-compose-tags@v1", "covergo/run-in-compose@v1" ]'
        checkout_base_path: ./.github/actions
        app_id: ${{ secrets.PRIVATE_ACTION_APP_ID }}
        app_private_key: ${{ secrets.PRIVATE_ACTION_APP_PRIVATE_KEY }}
    - name: Login to AliCloud Container Registry
      uses: docker/login-action@v1
      with:
        registry: registry-intl.cn-hongkong.aliyuncs.com
        username: ${{ secrets.ALI_CONTAINER_REGISTRY_USER }}
        password: ${{ secrets.ALI_CONTAINER_REGISTRY_PASSWORD }}
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT_FULL }}
    - name: Prepare compose file
      uses: ./.github/actions/set-compose-tags
      with:
        images: covergo/auth;covergo/auth-test-unit;covergo/cases-mariadb-test-integration;covergo/cases-mariadb-test-integration;covergo/cases-mariadb-test-integration
        target-tag: ${{ needs.version.outputs.issue_id_slug }}
        compose-file: docker-compose.yml
    - name: Run Acceptance tests
      uses: ./.github/actions/run-in-compose
      with:
        compose-file: docker-compose.yml
        service-name: cases-test-acceptance
        project-name: integration-test
    - name: Collect Acceptance tests results
      if: always()
      uses: ./.github/actions/docker-extract
      with:
        filter: ancestor=ghcr.io/covergo/cases-mariadb-test-integration:${{ needs.version.outputs.issue_id_slug }}
        container-path: app/TestResults
        host-path: ./TestResults
    - name: Gather test environment logs
      if: always()
      uses: ./.github/actions/docker-diagnose
      with:
        filter: name=filter*
        diagnostic-result-path: investigate
        include-compose: true
        encrypt-password: 123
        compose-file: docker-compose.yml
    - name: Upload environment logs
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: Acceptance tests environment diagnostics
        path: investigate/*
    - name: Upload Acceptance tests results
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: Acceptance tests results
        path: ${{ env.RESULTS_PATH }}
    - name: Upload Acceptance tests results to Behave.Pro
      if: always()
      env:
        behave_api_key: ${{ secrets.BEHAVE_PRO_TOKEN }}
        build_id: ${{ github.run_id }}
        build_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        results_folder: ${{ env.RESULTS_PATH }}
        results_file: cucumberResult.json
      run: |
        latest_commit_sha=$(git rev-parse HEAD)
        test_results_path="$results_folder/$results_file"

        curl -L -X PUT https://test-reports.behave.pro/REST/1.0/bdd/report \
        -H "X-API-KEY: $behave_api_key" \
        -H "X-COMMIT-ID: $latest_commit_sha" \
        -H "X-BUILD-ID: $build_id" \
        -H "X-BUILD-URL: $build_url" \
        --data-binary @"$test_results_path" \
    - name: Publish Acceptance tests results as check
      uses: deblockt/cucumber-report-annotations-action@v1.7
      if: always()
      with:
        name: Acceptance tests check
        access-token: ${{ secrets.GITHUB_TOKEN }}
        path: ${{ env.RESULTS_PATH }}/cucumberResult.json
  docker-build-mariadb-test-integration:
    name: Build Integration tests
    timeout-minutes: 30
    runs-on: ubuntu-latest
    needs:
    - version
    if: github.event_name == 'push' && contains(toJson(github.event.commits), '[ci skip]') == false
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT_FULL }}
    - name: Build and publish Integration tests docker image
      uses: docker/build-push-action@v2
      id: docker-build-mariadb-test-integration
      with:
        file: Tests.MariaDb.Integration.Dockerfile
        push: true
        tags: ghcr.io/covergo/cases-mariadb-test-integration:${{ needs.version.outputs.issue_id_slug }}
        cache-from: type=registry,ref=ghcr.io/covergo/cases-mariadb-test-integration:${{ needs.version.outputs.issue_id_slug }}
        cache-to: type=inline
    - name: Image digest
      run: echo ${{ steps.docker-build-mariadb-test-integration.outputs.digest }}
  run-mariadb-test-integration:
    runs-on: ubuntu-latest
    name: Run Integration tests
    timeout-minutes: 30
    needs:
    - docker-build-service
    - version
    - docker-build-integration-tests
    - docker-build-acceptance-tests
    - docker-build-mariadb-test-integration
    env:
      RESULTS_PATH: TestResults
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Checkout GitHub Action Repos
      uses: daspn/private-actions-checkout@v2
      with:
        actions_list: '[ "covergo/get-version@v1.4", "covergo/get-issue-key@v1.2", "covergo/docker-extract@v1", "covergo/docker-diagnose@v1.5", "covergo/set-compose-tags@v1", "covergo/run-in-compose@v1" ]'
        checkout_base_path: ./.github/actions
        app_id: ${{ secrets.PRIVATE_ACTION_APP_ID }}
        app_private_key: ${{ secrets.PRIVATE_ACTION_APP_PRIVATE_KEY }}
    - name: Login to AliCloud Container Registry
      uses: docker/login-action@v1
      with:
        registry: registry-intl.cn-hongkong.aliyuncs.com
        username: ${{ secrets.ALI_CONTAINER_REGISTRY_USER }}
        password: ${{ secrets.ALI_CONTAINER_REGISTRY_PASSWORD }}
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT_FULL }}
    - name: Prepare compose file
      uses: ./.github/actions/set-compose-tags
      with:
        images: covergo/auth;covergo/auth-test-unit;covergo/cases-mariadb-test-integration;covergo/cases-mariadb-test-integration;covergo/cases-mariadb-test-integration
        target-tag: ${{ needs.version.outputs.issue_id_slug }}
        compose-file: docker-compose.mariadb.yml
    - name: Run Integration tests
      uses: ./.github/actions/run-in-compose
      with:
        compose-file: docker-compose.mariadb.yml
        service-name: cases-mariadb-test-integration
        project-name: integration-test
    - name: Collect Integration tests results
      if: always()
      uses: ./.github/actions/docker-extract
      with:
        filter: ancestor=ghcr.io/covergo/cases-mariadb-test-integration:${{ needs.version.outputs.issue_id_slug }}
        container-path: app/TestResults
        host-path: ./TestResults
    - name: Gather test environment logs
      if: always()
      uses: ./.github/actions/docker-diagnose
      with:
        filter: name=*
        diagnostic-result-path: investigate
        include-compose: true
        encrypt-password: ${{ secrets.DIAGNOSTIC_PASSWORD }}$GITHUB_RUN_NUMBER
        compose-file: docker-compose.mariadb.yml
    - name: Upload environment logs
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: Integration tests environment diagnostics
        path: investigate/*
    - name: Upload Integration tests results
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: Integration tests results
        path: ${{ env.RESULTS_PATH }}
    - name: Publish Integration tests results as check
      uses: docker://ghcr.io/enricomi/publish-unit-test-result-action:latest
      if: always()
      with:
        report_individual_runs: "true"
        check_name: Integration tests check
        github_token: ${{ secrets.GITHUB_TOKEN }}
        files: ${{ env.RESULTS_PATH }}/**/*.xml
  docker-publish-github:
    name: Publish Auth to GitHub
    needs:
    - version
    - run-integration-tests
    - run-acceptance-tests
    - run-mariadb-test-integration
    - build-and-run-auth-test-unit
    - integration-tests-legacy-small
    - integration-tests-legacy-big
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(toJson(github.event.commits), '[ci skip]') == false
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT_FULL }}
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Build and publish Auth docker image
      uses: docker/build-push-action@v2
      id: docker-build-auth-service
      with:
        file: Dockerfile
        push: true
        tags: ${{ needs.version.outputs.docker_image_ghcr_tags }}
        cache-from: type=registry,ref=ghcr.io/covergo/auth:${{ needs.version.outputs.issue_id_slug }}
        cache-to: type=inline
    - name: Image digest
      run: echo ${{ steps.docker-build-auth-service.outputs.digest }}
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT_FULL }}
    - name: Build and publish Auth docker image
      uses: docker/build-push-action@v2
      id: docker-build-auth-service
      with:
        file: Dockerfile
        push: true
        tags: ${{ needs.version.outputs.docker_image_ghcr_tags }}
        cache-from: type=registry,ref=ghcr.io/covergo/auth:${{ needs.version.outputs.issue_id_slug }}
        cache-to: type=inline
    - name: Image digest
      run: echo ${{ steps.docker-build-auth-service.outputs.digest }}
  docker-publish-alicloud:
    name: Publish Auth to AliCloud
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    needs:
    - version
    - run-integration-tests
    - run-acceptance-tests
    - run-mariadb-test-integration
    - build-and-run-auth-test-unit
    - integration-tests-legacy-small
    - integration-tests-legacy-big
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT_FULL }}
    - name: Login to AliCloud Container Registry
      uses: docker/login-action@v1
      with:
        registry: registry-intl.cn-hongkong.aliyuncs.com
        username: ${{ secrets.ALI_CONTAINER_REGISTRY_USER }}
        password: ${{ secrets.ALI_CONTAINER_REGISTRY_PASSWORD }}
    - name: Build and publish Auth docker image
      uses: docker/build-push-action@v2
      id: docker-build-auth-service
      with:
        file: Dockerfile
        push: true
        tags: ${{ needs.version.outputs.docker_image_ali_cloud_tags }}
        cache-from: type=registry,ref=ghcr.io/covergo/auth:${{ needs.version.outputs.issue_id_slug }}
        cache-to: type=inline
    - name: Image digest
      run: echo ${{ steps.docker-build-auth-service.outputs.digest }}
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT_FULL }}
    - name: Login to AliCloud Container Registry
      uses: docker/login-action@v1
      with:
        registry: registry-intl.cn-hongkong.aliyuncs.com
        username: ${{ secrets.ALI_CONTAINER_REGISTRY_USER }}
        password: ${{ secrets.ALI_CONTAINER_REGISTRY_PASSWORD }}
    - name: Build and publish Auth docker image
      uses: docker/build-push-action@v2
      id: docker-build-auth-service
      with:
        file: Dockerfile
        push: true
        tags: ${{ needs.version.outputs.docker_image_ali_cloud_tags }}
        cache-from: type=registry,ref=ghcr.io/covergo/auth:${{ needs.version.outputs.issue_id_slug }}
        cache-to: type=inline
    - name: Image digest
      run: echo ${{ steps.docker-build-auth-service.outputs.digest }}
  nuget-publish:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs:
    - version
    - run-integration-tests
    - run-acceptance-tests
    - run-mariadb-test-integration
    - nuget-build
    - build-and-run-auth-test-unit
    - integration-tests-legacy-small
    - integration-tests-legacy-big
    name: Publish Nuget package
    env:
      IMAGE_TAG: ghcr.io/covergo/auth-nuget:${{ needs.version.outputs.issue_id_slug }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT_FULL }}
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Build and publish Auth client nuget docker image
      uses: docker/build-push-action@v2
      id: docker-build-auth-nuget
      with:
        file: ./Nuget.Dockerfile
        load: true
        tags: ghcr.io/covergo/auth-nuget:${{ needs.version.outputs.issue_id_slug }}
        cache-from: type=registry,ref=ghcr.io/covergo/auth-nuget:${{ needs.version.outputs.issue_id_slug }}
        cache-to: type=inline
        build-args: |
          APP_VERSION=${{ needs.version.outputs.app_version }}
          FILE_VERSION=${{ needs.version.outputs.file_version }}
          INFORMATIONAL_VERSION=${{ needs.version.outputs.information_version }}
    - name: Image digest
      run: echo ${{ steps.docker-build-auth-nuget.outputs.digest }}
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT_FULL }}
    - name: Checkout GitHub Action Repos
      uses: daspn/private-actions-checkout@v2
      with:
        actions_list: '[ "covergo/get-version@v1.4", "covergo/get-issue-key@v1.2", "covergo/docker-extract@v1", "covergo/docker-diagnose@v1.5", "covergo/set-compose-tags@v1", "covergo/run-in-compose@v1" ]'
        checkout_base_path: ./.github/actions
        app_id: ${{ secrets.PRIVATE_ACTION_APP_ID }}
        app_private_key: ${{ secrets.PRIVATE_ACTION_APP_PRIVATE_KEY }}
    - name: Build and publish Auth client nuget docker image
      uses: docker/build-push-action@v2
      id: docker-build-auth-nuget
      with:
        file: ./Nuget.Dockerfile
        load: true
        tags: ghcr.io/covergo/auth-nuget:${{ needs.version.outputs.issue_id_slug }}
        cache-from: type=registry,ref=ghcr.io/covergo/auth-nuget:${{ needs.version.outputs.issue_id_slug }}
        cache-to: type=inline
        build-args: |
          APP_VERSION=${{ needs.version.outputs.app_version }}
          FILE_VERSION=${{ needs.version.outputs.file_version }}
          INFORMATIONAL_VERSION=${{ needs.version.outputs.information_version }}
    - name: Image digest
      run: echo ${{ steps.docker-build-auth-nuget.outputs.digest }}
    - name: Create docker image with nuget packages
      run: docker create $IMAGE_TAG --name nuget
    - name: Copy nuget packages from docker image
      uses: ./.github/actions/docker-extract
      with:
        filter: ancestor=$IMAGE_TAG
        container-path: app/nuget
        host-path: ./nuget
    - name: Push generated package to GitHub registry
      run: dotnet nuget push ./nuget/*.nupkg --api-key ${{ secrets.GITHUB_TOKEN }} --skip-duplicate --source https://nuget.pkg.github.com/covergo/index.json
    - name: Push generated package symbols to GitHub registry
      run: dotnet nuget push ./nuget/*.snupkg --api-key ${{ secrets.GITHUB_TOKEN }} --skip-duplicate --source https://nuget.pkg.github.com/covergo/index.json
    if: github.event_name == 'push' && contains(toJson(github.event.commits), '[ci skip]') == false
  integration-tests-legacy-small:
    name: Run legacy integration small tenants tests
    runs-on: self-hosted
    timeout-minutes: 30
    needs:
    - version
    - docker-build-service
    steps:
    - name: Checkout tests repository
      uses: actions/checkout@v2
      with:
        repository: covergo/integration-testing
        ref: ${{ github.head_ref }}
        token: ${{ github.token }}
    - name: Checkout GitHub Action Repos
      uses: daspn/private-actions-checkout@v2
      with:
        actions_list: '[ "covergo/get-version@v1.4", "covergo/get-issue-key@v1.2", "covergo/docker-extract@v1", "covergo/docker-diagnose@v1.5", "covergo/set-compose-tags@v1", "covergo/run-in-compose@v1" ]'
        checkout_base_path: ./.github/actions
        app_id: ${{ secrets.PRIVATE_ACTION_APP_ID }}
        app_private_key: ${{ secrets.PRIVATE_ACTION_APP_PRIVATE_KEY }}
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT_FULL }}
    - name: Login to AliCloud Container Registry
      uses: docker/login-action@v1
      with:
        registry: registry-intl.cn-hongkong.aliyuncs.com
        username: ${{ secrets.ALI_CONTAINER_REGISTRY_USER }}
        password: ${{ secrets.ALI_CONTAINER_REGISTRY_PASSWORD }}
    - name: Prepare environment for integration tests
      uses: ./launch_environment
      with:
        mongo-user: ${{ secrets.MONGO_USER }}
        mongo-password: ${{ secrets.MONGO_PASSWORD }}
        mongo-url: dds-3ns0c4f035f4d3141258-pub.mongodb.rds.aliyuncs.com:3717,dds-3ns0c4f035f4d3142331-pub.mongodb.rds.aliyuncs.com:3717/admin?replicaSet=mgset-5830817&maxPoolSize=500&waitQueueMultiple=5
        service-under-test: auth
        image-under-test: covergo/auth:local
    - name: Install yarn
      run: yarn install
    - name: Run aag_uat tests
      run: yarn aag_uat
    - name: Run aag_uat tests
      run: yarn aag_uat
    - name: Run tahoe_uat tests
      run: yarn tahoe_uat
    - name: Run apex_uat tests
      run: yarn apex_uat
    - name: Run asia_uat tests
      run: yarn asia_uat
    - name: Gather test environment logs
      if: ${{ always() }}
      uses: ./.github/actions/docker-diagnose
      with:
        filter: name=*
        diagnostic-result-path: diagnostics
        include-compose: true
        encrypt-password: ${{ secrets.DIAGNOSTIC_PASSWORD }}$GITHUB_RUN_NUMBER
    - name: Stop compose
      if: ${{ always() }}
      run: docker-compose down --remove-orphans
    - name: Upload test environment logs
      if: ${{ always() }}
      uses: actions/upload-artifact@v2
      with:
        name: Small tenants legacy integration tests diagnostics
        path: diagnostics/*
  integration-tests-legacy-big:
    name: Run legacy integration big tenants tests
    runs-on: self-hosted
    timeout-minutes: 30
    needs:
    - version
    - docker-build-service
    steps:
    - name: Checkout tests repository
      uses: actions/checkout@v2
      with:
        repository: covergo/integration-testing
        ref: ${{ github.head_ref }}
        token: ${{ github.token }}
    - name: Checkout GitHub Action Repos
      uses: daspn/private-actions-checkout@v2
      with:
        actions_list: '[ "covergo/get-version@v1.4", "covergo/get-issue-key@v1.2", "covergo/docker-extract@v1", "covergo/docker-diagnose@v1.5", "covergo/set-compose-tags@v1", "covergo/run-in-compose@v1" ]'
        checkout_base_path: ./.github/actions
        app_id: ${{ secrets.PRIVATE_ACTION_APP_ID }}
        app_private_key: ${{ secrets.PRIVATE_ACTION_APP_PRIVATE_KEY }}
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT_FULL }}
    - name: Login to AliCloud Container Registry
      uses: docker/login-action@v1
      with:
        registry: registry-intl.cn-hongkong.aliyuncs.com
        username: ${{ secrets.ALI_CONTAINER_REGISTRY_USER }}
        password: ${{ secrets.ALI_CONTAINER_REGISTRY_PASSWORD }}
    - name: Prepare environment for integration tests
      uses: ./launch_environment
      with:
        mongo-user: ${{ secrets.MONGO_USER }}
        mongo-password: ${{ secrets.MONGO_PASSWORD }}
        mongo-url: dds-3ns0c4f035f4d3141258-pub.mongodb.rds.aliyuncs.com:3717,dds-3ns0c4f035f4d3142331-pub.mongodb.rds.aliyuncs.com:3717/admin?replicaSet=mgset-5830817&maxPoolSize=500&waitQueueMultiple=5
        service-under-test: auth
        image-under-test: covergo/auth:local
    - name: Install yarn
      run: yarn install
    - name: Run test_uat tests
      run: yarn test_uat
    - name: Run test_uat1 tests
      run: yarn test_uat1
    - name: Run test_uat2 tests
      run: yarn test_uat2
    - name: Run test_uat3 tests
      run: yarn test_uat3
    - name: Run test_uat4 tests
      run: yarn test_uat4
    - name: Run test_uat5 tests
      run: yarn test_uat5
    - name: Gather test environment logs
      if: ${{ always() }}
      uses: ./.github/actions/docker-diagnose
      with:
        filter: name=*
        diagnostic-result-path: diagnostics
        include-compose: true
        encrypt-password: ${{ secrets.DIAGNOSTIC_PASSWORD }}$GITHUB_RUN_NUMBER
    - name: Stop compose
      if: ${{ always() }}
      run: docker-compose down --remove-orphans
    - name: Upload test environment logs
      if: ${{ always() }}
      uses: actions/upload-artifact@v2
      with:
        name: Big tenants legacy integration tests diagnostics
        path: diagnostics/*
